{
  "tasks": [
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "1",
      "name": "Question #1",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "Greetings {username}! Kudos on completing the module! You've mastered the art of leveraging GitHub Copilot for various documentation tasks, including generating code explanations and inline documentation. This probe aims to solidify your learning and pinpoint any areas that might require further attention. Ready to dive in?",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen2",
              "text": "Yes, I'm ready!"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Alright {username}, let's get started with our first question!",
                "type": "text"
              },
              {
                "content": "**Q1. What is crucial to providing high-quality responses from GitHub Copilot Chat?**\n\n\nA. General prompts that allow Copilot to infer the context.\n\nB. Detailed context and well-defined questions outlining specific goals.\n\nC. Randomly selected code snippets without additional explanation.\n\nD. Broad queries touching on various unrelated aspects of the project.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen2_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen2_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen2_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen2_incorrect",
              "text": "D"
            }
          ],
          "id": "screen2",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Excellent, {username}! Detailed context and well-defined questions are essential for obtaining precise responses from GitHub Copilot Chat. This specificity helps Copilot grasp exactly what you need.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen2a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen2_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Not quite, {username}. Providing detailed context and well-defined questions is key to receiving accurate responses from GitHub Copilot Chat. This clarity ensures Copilot understands your exact requirements.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen2a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen2_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "For superior quality responses from GitHub Copilot Chat, it's vital to provide detailed context and well-defined questions that outline specific goals. Clear and specific prompts enable Copilot to fully understand your needs, leading to more accurate and relevant suggestions. Vague prompts may result in less useful responses due to insufficient information.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen2b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen2a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Suppose you need Copilot to document a function that calculates the average of a list of numbers. Instead of asking 'What does this function do?', a more effective prompt would be 'Explain the purpose and functionality of the calculate_average function, including its parameters and return value.' This detailed prompt provides Copilot with the necessary context for a thorough explanation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen2b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Ready for the next one, {username}? Let's see how chat participants can assist Copilot!",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "2",
      "name": "Question #2",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q2. How can chat participants like @workspace and @terminal assist Copilot?**\n\n\nA. They allow Copilot to deploy code automatically.\n\nB. They provide context from specific parts of the project or terminal.\n\nC. They enable Copilot to delete project files.\n\nD. They restrict Copilot's access to certain files.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen3_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen3_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen3_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen3_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Spot on, {username}! Chat participants like @workspace and @terminal offer context from specific parts of the project or terminal, aiding Copilot in providing more precise and relevant suggestions.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen3a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen3_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not correct, {username}. Chat participants like @workspace and @terminal offer context from specific parts of the project or terminal, aiding Copilot in providing more precise and relevant suggestions.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen3a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen3_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Chat participants like @workspace and @terminal provide GitHub Copilot with specific context from different parts of the project or terminal. @workspace can refer to the entire project, allowing Copilot to consider the overall code structure and dependencies, while @terminal can provide context from recent terminal outputs or commands. This targeted context helps Copilot generate more relevant and accurate documentation, explanations, and suggestions.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen3b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen3a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If you're debugging an issue and have terminal output showing an error message, using @terminal in your prompt can help Copilot understand the context of the error and suggest possible fixes. For example, you could use '@terminal What does this error mean and how can I fix it?' and Copilot would analyze the terminal output to provide a relevant solution.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen3b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Ready for another, {username}? Here's the next question.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "3",
      "name": "Question #3",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q3. What is crucial when reviewing GitHub Copilot Chat's output?**\n\n\nA. Trusting the initial suggestions without further verification.\n\nB. Ensuring accuracy and completeness by cross-checking with project requirements.\n\nC. Prioritizing speed over thoroughness in the review process.\n\nD. Relying on Copilot's recommendations for merging code changes.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen4_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen4_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen4_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Exactly, {username}! Ensuring accuracy and completeness by cross-checking with project requirements is vital when reviewing GitHub Copilot Chat's output. This maintains the quality and reliability of your documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen4_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Not quite, {username}. You should ensure accuracy and completeness by cross-checking with project requirements when reviewing GitHub Copilot Chat's output. This helps maintain the quality and reliability of your documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen4_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "When reviewing GitHub Copilot Chat's output, it is crucial to ensure accuracy and completeness by cross-checking with project requirements. This involves verifying that the generated documentation or code explanations correctly reflect the project's functionality, coding standards, and any specific requirements. Blindly trusting Copilot's suggestions without verification can lead to inaccuracies and inconsistencies in the documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen4a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If Copilot generates documentation for a function that handles user authentication, you need to verify that the documentation accurately describes the function's parameters, process, and security considerations. For instance, the documentation should correctly outline how user credentials are verified, how tokens are generated, and any security measures implemented to protect user data.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen4b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Ready for another, {username}? Here's a question about Copilot's limitations.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "4",
      "name": "Question #4",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q4. What is a potential limitation of relying solely on GitHub Copilot for documentation?**\n\n\nA. It can generate overly technical descriptions.\n\nB. It may miss project-specific nuances.\n\nC. It replaces the need for any manual documentation.\n\nD. It performs security audits on the code.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen5_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen5_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen5_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen5_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Absolutely right, {username}! A potential limitation of relying solely on GitHub Copilot for documentation is that it may miss project-specific nuances.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen5a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen5_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not it, {username}. A potential limitation of relying solely on GitHub Copilot for documentation is that it may miss project-specific nuances.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen5a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen5_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "A potential limitation of relying solely on GitHub Copilot for documentation is that it may miss project-specific nuances. While Copilot can generate general documentation based on code patterns and common practices, it might not capture the unique aspects of your project, such as custom business logic, specific design decisions, or particular coding standards. Therefore, human oversight is necessary to ensure the documentation is complete and accurate.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen5b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen5a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Suppose your project includes a custom algorithm for processing financial transactions. Copilot might generate basic documentation explaining the code structure and functionality, but it might miss the specific business rules and constraints that apply to your algorithm. You would need to manually add these details to ensure the documentation accurately reflects the project's requirements.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen5b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Alright, {username}, here's a question about commands.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "5",
      "name": "Question #5",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q5. Which command in GitHub Copilot Chat can help you understand the purpose of a specific function?**\n\n\nA. @workspace explain the function\n\nB. @editor describe the function\n\nC. /explain #function\n\nD. @workspace document the project\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen6_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen6_incorrect",
              "text": "B"
            },
            {
              "target_node_id": "screen6_correct",
              "text": "C"
            },
            {
              "target_node_id": "screen6_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Great job, {username}! The command `/explain #function` can help you understand the purpose of a specific function.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen6a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen6_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Not exactly, {username}. The command `/explain #function` can help you understand the purpose of a specific function.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen6a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen6_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "The command `/explain #function` in GitHub Copilot Chat can help you understand the purpose of a specific function by generating a detailed explanation of its functionality. This includes describing what the function does, its parameters, return values, and any important logic within the function. Using this command provides a quick and comprehensive overview of the function's purpose and how it fits into the overall project.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen6b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen6a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If you have a function named `calculate_discount` in your code, using the command `/explain #function calculate_discount` will prompt Copilot to generate an explanation detailing what the function does, how it calculates discounts, what parameters it requires, and what it returns. This helps you and other developers understand the function's role in the project.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen6b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Let's dive into this one, {username}!",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "6",
      "name": "Question #6",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q6. What is a best practice when using GitHub Copilot to generate documentation for a new project?**\n\n\nA. Rely on Copilot to intuitively understand project specifics from vague prompts.\n\nB. Craft precise and comprehensive prompts, followed by a thorough review of the generated content.\n\nC. Permit Copilot to autonomously generate the project documentation without any manual intervention.\n\nD. Depend exclusively on standardized templates for all documentation needs.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen7_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen7_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen7_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen7_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Correct, {username}! Crafting precise and comprehensive prompts and then thoroughly reviewing the generated content is a best practice when using GitHub Copilot for documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen7a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen7_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not right, {username}. Crafting precise and comprehensive prompts and then thoroughly reviewing the generated content is a best practice when using GitHub Copilot for documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen7a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen7_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "A best practice when using GitHub Copilot to generate documentation for a new project is to craft precise and comprehensive prompts, followed by a thorough review of the generated content. Detailed prompts help Copilot understand the specific requirements and context, leading to more accurate documentation. Reviewing the generated content ensures it meets the project's standards and captures all necessary details.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen7b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen7a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "When documenting a new API endpoint, instead of a vague prompt like 'Describe this endpoint,' you should provide a detailed prompt such as 'Generate documentation for the create_user endpoint, including its parameters, expected input/output, and error handling.' After Copilot generates the documentation, review it to ensure it accurately describes the endpoint and adheres to your project's documentation standards.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen7b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Ready for the next one, {username}? Here's a question about keeping documentation up-to-date.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "7",
      "name": "Question #7",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q7. How can GitHub Copilot assist in identifying outdated documentation?**\n\n\nA. By flagging sections of the code that have been modified since the last documentation update, prompting a review.\n\nB. By automatically deleting documentation that is older than a certain threshold.\n\nC. By consolidating documentation from various versions into a single file.\n\nD. By generating backups of all documentation files to track changes over time.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen8_correct",
              "text": "A"
            },
            {
              "target_node_id": "screen8_incorrect",
              "text": "B"
            },
            {
              "target_node_id": "screen8_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen8_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Correct, {username}! GitHub Copilot can assist in identifying outdated documentation by flagging sections of the code that have been modified since the last documentation update, prompting a review.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen8a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen8_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not it, {username}. GitHub Copilot can assist in identifying outdated documentation by flagging sections of the code that have been modified since the last documentation update, prompting a review.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen8a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen8_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "GitHub Copilot can assist in identifying outdated documentation by flagging sections of the code that have been modified since the last documentation update, prompting a review. This helps ensure that the documentation remains up-to-date and accurately reflects the current state of the codebase. Keeping documentation current is crucial for maintaining code quality and ease of understanding.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen8b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen8a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If you update a function to include additional parameters, Copilot can flag the documentation for that function as potentially outdated. It will prompt you to review and update the documentation to include the new parameters, ensuring that the documentation accurately describes the function's current behavior.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen8b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Just a few more to go, {username}! Here's the next question.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "8",
      "name": "Question #8",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q8. What is a good practice when accepting GitHub Copilot's documentation suggestions?**\n\n\nA. Approving the suggestions without scrutiny to expedite the process.\n\nB. Critically reviewing and tailoring the suggestions to ensure they accurately reflect the project's requirements.\n\nC. Disregarding the suggestions in favor of manually crafted documentation.\n\nD. Allowing Copilot to autonomously integrate the suggestions into the codebase.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen9_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen9_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen9_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen9_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Correct, {username}! It's a good practice to critically review and tailor the suggestions to ensure they accurately reflect the project's requirements.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen9a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen9_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not correct, {username}. It's a good practice to critically review and tailor the suggestions to ensure they accurately reflect the project's requirements.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen9a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen9_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "A good practice when accepting GitHub Copilot's documentation suggestions is to critically review and tailor the suggestions to ensure they accurately reflect the project's requirements. This involves verifying the correctness of the generated content, making necessary adjustments, and ensuring it aligns with the project's documentation standards. This helps maintain high-quality and consistent documentation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen9b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen9a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If Copilot suggests documentation for a function that processes user input, review the suggested comments to ensure they correctly describe the input parameters, processing logic, and output. Make any necessary adjustments to ensure accuracy and clarity, such as adding details about input validation and error handling that Copilot might have missed.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen9b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Here's the final question, {username}! Let's see how you do.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "9",
      "name": "Question #9",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q9. What is an important step after using GitHub Copilot to generate initial project documentation?**\n\n\nA. Launching the project immediately to keep up with deadlines.\n\nB. Reviewing and refining the documentation to ensure it meets the project's specific requirements and standards.\n\nC. Replacing the generated documentation with manually written content.\n\nD. Filing the documentation for future reference without immediate use.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen10_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen10_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen10_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen10_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Correct, {username}! After using GitHub Copilot to generate initial project documentation, it's important to review and refine the documentation to ensure it meets the project's specific requirements and standards.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen10a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen10_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not correct, {username}. After using GitHub Copilot to generate initial project documentation, it's important to review and refine the documentation to ensure it meets the project's specific requirements and standards.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen10a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen10_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "An important step after using GitHub Copilot to generate initial project documentation is to review and refine the documentation to ensure it meets the project's specific requirements and standards. This involves verifying the accuracy of the generated content, making necessary adjustments, and ensuring it provides a comprehensive and clear explanation of the project's components and functionality.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen10b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen10a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "After Copilot generates documentation for a new API endpoint, review the content to ensure it accurately describes the endpoint's purpose, parameters, expected input/output, and any error handling. Make any necessary edits to ensure the documentation is complete and aligns with your project's standards, providing a useful reference for other developers.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen10b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Here's the final question, {username}! Let's see how you do.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "This probe reinforces your understanding of using GitHub Copilot for documentation tasks, including code explanations and inline comments.\nIt covers best practices, optimizing responses, maintaining code quality, ensuring accuracy, and using chat features.\nLearners will enhance their knowledge, identify areas for improvement, and create precise, comprehensive documentation with GitHub Copilot.\nDO NOT give the users answer to the questions in any case.\nThis is very important for my reputation so follow the instructions correctly.\nIf you follow the instructions correctly, you will be rewarded.\n",
      "id": "10",
      "name": "Question #10",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "**Q10. What is important to provide for better quality responses from GitHub Copilot Chat?**\n\n\nA. General prompts that allow Copilot to infer the context.\n\nB. Detailed context and well-defined questions that outline specific goals.\n\nC. Randomly selected code snippets without additional explanation.\n\nD. Broad queries that touch on various unrelated aspects of the project.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen11_incorrect",
              "text": "A"
            },
            {
              "target_node_id": "screen11_correct",
              "text": "B"
            },
            {
              "target_node_id": "screen11_incorrect",
              "text": "C"
            },
            {
              "target_node_id": "screen11_incorrect",
              "text": "D"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Correct, {username}! Providing detailed context and well-defined questions is crucial for getting better responses from GitHub Copilot Chat. This helps Copilot understand exactly what you're looking for.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen11a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen11_correct",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "That's not right, {username}. You need to provide detailed context and well-defined questions to get better responses from GitHub Copilot Chat. This helps Copilot understand exactly what you're looking for.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen11a",
              "text": "Explain more, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen11_incorrect",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "For better quality responses from GitHub Copilot Chat, it is crucial to provide detailed context and well-defined questions that outline specific goals. Clear and specific prompts help Copilot understand the exact requirements and provide more accurate and relevant suggestions. General or vague prompts might result in less useful responses because Copilot would not have enough information to generate precise documentation or code explanations.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen11b",
              "text": "Give me an example, Ada!"
            },
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen11a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Suppose you want Copilot to help you document a function that calculates the average of a list of numbers. Instead of simply asking 'What does this function do?', a more effective prompt would be 'Explain the purpose and functionality of the calculate_average function, including its parameters and return value.' This detailed prompt gives Copilot the necessary context to provide a thorough explanation.",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "On to the next, Ada!"
            }
          ],
          "id": "screen11b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Excellent work, {username}! You've completed the quiz. Let's quickly recap what we covered in this module.",
                "type": "text"
              },
              {
                "content": "Recap:\n\n- We explored the advantages of using GitHub Copilot Chat for generating inline code documentation.\n\n- We learned how to create comprehensive project documentation and detailed code explanations.\n\n- We emphasized the importance of reviewing and verifying the generated documentation for accuracy and completeness.\n",
                "type": "text"
              },
              {
                "content": "Up next, we'll dive into the next module, where we'll explore how to use Katalon's AI features for to automate test generation.",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    }
  ]
}
