tasks:
  - name: Tasks Overview
    context: 'In this tutorial segment, learners at Alfred AI are tasked with creating
      comprehensive documentation for Project Hermes, an advanced AI-driven customer
      support system. They begin by understanding the importance of documentation
      and breaking down the process into manageable tasks: generating project explanations
      using GitHub Copilot Chat, switching to the latest feature branch, creating
      a README.md file for the database schema, generating inline documentation for
      CRUD operations in the app/db_models/crud.py file, and documenting endpoints
      for the new Tickets feature. Finally, they commit their changes and create a
      pull request for review. Each step is detailed to ensure learners can navigate
      the codebase, improve its maintainability, and provide a clear guide for future
      developers.'
    id: '1'
    nodes:
    - body:
        parts:
        - content: "Welcome to your next challenge! \U0001F31F Imagine you're exploring\
            \ a vast library of code without a guidebook. Our goal today is to create\
            \ that guidebook for Project Hermes, Alfred AI's advanced AI-driven customer\
            \ support system. We'll dive deep into the code and document every crucial\
            \ detail to ensure that future developers can navigate it with ease. Ready\
            \ to get started?"
          type: text
      edges:
      - target_node_id: screen2
        text: Yes, let's get started!
      - target_node_id: screen1a
        text: Tell me more about the importance of this task.
      id: START
      type: message
    - body:
        parts:
        - content: Comprehensive documentation is like a roadmap for developers. It
            ensures everyone understands the project, its purpose, and how to contribute
            effectively. Without it, new developers can feel lost, and even experienced
            ones can make mistakes. Let's dive into why this expedition is crucial
            and how it will benefit Project Hermes. Ready to proceed?
          type: text
      edges:
      - target_node_id: screen2
        text: Yes, let's proceed!
      id: screen1a
      type: message
    - body:
        parts:
        - content: 'Let''s break down our expedition into manageable tasks. Here''s
            what we''ll cover:'
          type: text
        - content: "1. **Project Understanding and Explanation**:\n    - Use GitHub\
            \ Copilot Chat to generate explanations for the project and specific files\
            \ such as `tickets.py`.\n    - Understand the overall structure and purpose\
            \ of the project.\n2. **Switch to the latest feature branch: add/tickets**:\n\
            \    - Use the command `git checkout add/tickets` to switch to the new\
            \ branch.\n3. **Create a README.md file for the database schema in `app/db_models`**:\n\
            \    - Document related files, database fields, and relationships.\n4.\
            \ **Create Inline Documentation for the `app/db_models/crud.py` File**:\n\
            \    - Include function documentation, parameters, and outputs.\n5. **Create\
            \ Inline Documentation for `app/api/routes/projects.py` and `app/api/routes/tickets.py`**:\n\
            \    - Add type annotations and document the code.\n6. **Extend the root\
            \ folder README.md file for the new `Tickets` feature**:\n    - Document\
            \ the endpoints, operations, HTTP methods, and update the folder structure.\n\
            7. **Commit Changes and Create a Pull Request**:\n    - Create a comprehensive\
            \ commit message and pull request detailing the documentation added.\n"
          type: text
      edges:
      - target_node_id: screen3
        text: Got it! What's next?
      - target_node_id: screen2a
        text: Can you explain more about one of these tasks?
      id: screen2
      type: message
    - body:
        parts:
        - content: Which task would you like more details on?
          type: text
      edges:
      - target_node_id: screen2b
        text: 'Task 1: Project Understanding and Explanation'
      - target_node_id: screen2c
        text: 'Task 2: Switching Branche'
      - target_node_id: screen2d
        text: 'Task 3: Creating README.md for Database Schema'
      - target_node_id: screen2e
        text: 'Task 4: Creating Inline Documentation'
      - target_node_id: screen2f
        text: 'Task 5: Extending README.md for Tickets Feature'
      - target_node_id: screen2g
        text: 'Task 6: Committing Changes and Creating a Pull Request'
      - target_node_id: screen2
        text: Back to Overview
      id: screen2a
      type: message
    - body:
        parts:
        - content: To understand the project, we'll use GitHub Copilot Chat to generate
            explanations for the overall structure and specific files such as `tickets.py`.
            This will help us get a clear picture of the project's purpose and how
            different components interact. Ready to move to the next task?
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2b
      type: message
    - body:
        parts:
        - content: To switch to the latest feature branch that your coworker has pushed,
            use the following command:This will allow you to access the latest updates
            and work on the new tickets feature. Ready to move to the next task?
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2c
      type: message
    - body:
        parts:
        - content: We'll create a README.md file for the database schema in `app/db_models`.
            This will include documentation for related files, database fields, and
            relationships. This ensures a clear understanding of the database structure
            and its components. Ready to move to the next task?
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2d
      type: message
    - body:
        parts:
        - content: We'll generate inline documentation for the `app/db_models/crud.py`
            file and all functions. This includes documenting function parameters
            and outputs to improve code readability and maintainability. Ready to
            move to the next task?
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2e
      type: message
    - body:
        parts:
        - content: "We'll extend the root folder README.md file to include the new\
            \ Tickets feature. This involves documenting the endpoint\u2019s operations,\
            \ HTTP methods, and updating the folder structure. Ready to move to the\
            \ next task?"
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2f
      type: message
    - body:
        parts:
        - content: Lastly, we'll commit our changes and create a pull request against
            the `main` branch for review. Make sure to write a comprehensive commit
            message and pull request description detailing the documentation added
            for the ticket feature. Ready to move to the next task?
          type: text
      edges:
      - target_node_id: screen3
        text: Yes, let's proceed!
      - target_node_id: screen2a
        text: I have another question.
      id: screen2g
      type: message
    - body:
        parts:
        - content: Let's start by understanding the overall structure and purpose
            of the project using GitHub Copilot Chat. This will help us get a clear
            picture of how different components interact and the project's goals.
            First, we'll generate explanations for the project and specific files
            such as `tickets.py`.
          type: text
        - content: When you're all set and ready to go, let me know!
          type: text
      edges:
      - target_node_id: END
        text: All set and ready!
      id: screen3
      type: message
    - body:
        parts:
        - content: Awesome! By now, you should have a general idea about the codebase
            and ready to contribute. Let's keep going!
          type: text
        - content: 'Now, let''s switch to the latest feature branch where your coworker
            has pushed their code for the tickets feature. Use the following command
            in the terminal: `git checkout add/tickets`'
          type: text
        - content: This will allow you to access the latest updates and work on the
            new tickets feature.
          type: text
      id: END
      type: message
  - name: Generate a README.md file for the database schema
    context: In this task, learners are instructed to create a README.md file for
      the database schema within the app/db_models folder of Project Hermes. This
      README.md file should document the module's related files, database fields for
      Projects and Tickets, including all related columns, fields, and types, and
      the relationships between Projects and Tickets, such as any foreign keys. Learners
      will use GitHub Copilot to generate this README.md file, ensuring it accurately
      reflects the database schema's structure and relationships. This documentation
      will allow future developers to understand the database schema without needing
      to delve into the code. Once the README.md file is generated and placed in the
      specified folder, learners can proceed to the next task.
    id: '2'
    nodes:
    - body:
        parts:
        - content: In this task, we need to create a README.md file for the database
            schema in app/db_models. Let's do that now.
          type: text
        - content: '- Document the module''s related files

            - Document the Database Fields among `Projects` and `Tickets` such as
            all related columns, fields, and types.

            - Document the relationships between `Projects` and `Tickets` such as
            any foreign keys

            '
          type: text
        - content: You can use copilot to generate a README.md file for the database
            schema and place it within the `app/db_models` folder. This README.md
            file will be used to document the database schema's relationships and
            fields.
          type: text
      edges:
      - target_node_id: END
        text: Generated and placed the README.md file
      id: START
      type: message
    - body:
        parts:
        - content: Awesome, we should be able to refer to that README.md file to understand
            the database schema without having to look at the code. Let's move on
            to the next task!
          type: text
      id: END
      type: message
  - name: Generate inline documentation for the CRUD operations
    context: In this task, learners are instructed to generate inline documentation
      for all CRUD operations in the app/db_models/crud.py file, including the new
      tickets feature and any undocumented functions. This documentation should detail
      the functions' inputs, required parameters, and outputs with their respective
      types. Learners will use the inline chat feature with GitHub Copilot Chat to
      accomplish this. Once the documentation is generated, it should provide clear
      information about each function's purpose, parameters, and return values, enhancing
      the understanding and maintainability of the code. After completing this task,
      learners can move on to the next step in the project.
    id: '3'
    nodes:
    - body:
        parts:
        - content: In this task, include function documentation such as required parameters
            and outputs with their respective types. One way to do this is to use
            the inline chat feature with GitHub Copilot Chat.
          type: text
        - content: Head to the `app/db_models/crud.py` file and generate inline documentation
            for all of the CRUD operations. This should include the new tickets feature,
            but also any undocumented functions as well. This should give us information
            about the function's inputs and outputs.
          type: text
        - content: Once you're done, let me know!
          type: text
      edges:
      - target_node_id: END
        text: Generated documentation
      id: START
      type: message
    - body:
        parts:
        - content: Awesome, documenting the functions will help us understand the
            code better such as what parameters are required and what the function
            returns as annotations. Let's move on to the next task!
          type: text
      id: END
      type: message
  - name: Generate inline documentation for the API Routes
    context: In this task, learners are instructed to add type annotations and generate
      inline documentation for the app/api/routes/projects.py and app/api/routes/tickets.py
      files. They need to include function documentation detailing required parameters
      and outputs with their respective types. This task emphasizes the importance
      of type annotations for best practices. Learners are guided to use the inline
      chat feature with GitHub Copilot Chat, similar to the previous task, to assist
      in adding type hints and documentation. An example is provided to highlight
      the lack of type annotations in the create_ticket function, which they need
      to address. This task aims to enhance the code's clarity and maintainability
      by ensuring all functions have proper documentation and type annotations. After
      completing this task, learners can proceed to the next step in the project.
    id: '4'
    nodes:
    - body:
        parts:
        - content: Your team member forgot to include type annotations, use the existing
            `app/api/routes/projects.py` file and the documentation on the database
            schema you prepared to add type annotations. These should always be added
            for best practices!
          type: text
        - content: In this task, include type annotations and function documentation
            such as required parameters and outputs with their respective types. One
            way to do this is to use the inline chat feature with GitHub Copilot Chat
            like we did in the previous task.
          type: text
        - content: Let's do this for both the `app/api/routes/projects.py` file and
            `app/api/routes/tickets.py` file. Here is an example of what should change,
            notice how there isn't any type hinting for the `create_ticket` function.
          type: text
        - content: "```\n@router.post('', response_model=TicketResponse)\nasync def\
            \ create_ticket(ticket, db = Depends(get_db)):\n    db_ticket = crud.create_ticket(db,\
            \ ticket.project_id, ticket.title, ticket.description, ticket.status,\
            \ ticket.priority)\n    return db_ticket\n```\n"
          type: text
        - content: Once you're done, let me know!
          type: text
      edges:
      - target_node_id: END
        text: Added types and documentation
      id: START
      type: message
    - body:
        parts:
        - content: Awesome, documenting the functions will help us understand the
            code better such as what parameters are required and what the function
            returns as annotations. Let's move on to the next task!
          type: text
      id: END
      type: message
  - name: Extend the root folder README.md file for the new Tickets feature
    context: In this task, learners are instructed to extend the existing README.md
      file in the root folder to include comprehensive documentation for the new tickets
      feature. They need to document the endpoint's operations, HTTP methods, and
      URLs, similar to how the projects feature is documented. Learners are guided
      to use GitHub Copilot to update the README.md file and add any relevant documentation
      for the tickets feature. By ensuring that the tickets feature is fully documented,
      learners will help maintain consistency and clarity in the project's documentation,
      making it easier for future developers to understand and work with the codebase.
      Once this task is completed, they can proceed to the final task.
    id: '5'
    nodes:
    - body:
        parts:
        - content: Given the existing table for the projects feature, be sure to fully
            document the tickets feature within the README file such as the endpoint's
            operations, HTTP method, and the URL. There already exists a README.md
            file in the root folder, so you can add the tickets feature to the existing
            README.md file.
          type: text
        - content: Previously, the team already wrote a section about the `projects`
            feature, so you can add the `tickets` feature right underneath it.
          type: text
        - content: Use Github Copilot to not only update the README.md file, but also
            add any relevant documentation for the tickets feature.
          type: text
        - content: Once you're done, let me know!
          type: text
      edges:
      - target_node_id: END
        text: Extended README file
      id: START
      type: message
    - body:
        parts:
        - content: Great, let's move on to the final task!
          type: text
      id: END
      type: message
  - name: Commit and make Pull Request
    context: In this task, learners are instructed to commit their changes and create
      a pull request to merge the feature branch into the main branch. They are guided
      to use the command git commit -m 'Your commit message' to commit their changes
      and git push to push the changes to GitHub. The commit message should include
      details about the changed files and the modifications made. For the pull request,
      learners must title it 'Task - 7 <FEATURE>' to ensure you can easily find it
      for review. You will then review the pull request, looking for extensive documentation
      on the new Tickets feature, including routes, functions, and database operations,
      as well as the presence of README.md files in both the root folder and the app/db_models
      folder detailing the database schema and relationships between tables. This
      final task ensures that the documentation is thoroughly reviewed and approved,
      enhancing the project's maintainability and clarity for future developers.
    id: '6'
    nodes:
    - body:
        parts:
        - content: Now that we are done, commit your changes by using the command,
            `git commit -m 'Your commit message'` and push your changes to GitHub
            by using the command, `git push`. Be sure to include in your commit message,
            what files were changed and what changes were made.
          type: text
        - content: Then, create a pull request for the feature branch to merge into
            the `main` branch so I can review your changes. You will have to name
            your pull request as `Task - 7 <FEATURE>`. I will review your pull request
            and provide feedback!
          type: text
      edges:
      - target_node_id: pr_review
        text: Submitted Pull Request!
      id: START
      type: message
    - body:
        parts:
        - content: Cool! Give me a minute to read your PR...
          type: text
        - condition:
            args:
            - pr_feedback
            - Search PR for extensive documentation on the new `Tickets` feature where
              routes, functions, and database operations are documented. There must
              exist a README.md file in the root folder that includes the `Tickets`
              feature. There must exist a README file in the `app/db_models` folder
              detailing the database schema such as the relationship between the `Projects`
              and `Tickets` tables.
            - f0WtZD7ZIU9QMo8ZnOx6
            func: handle_action
          status:
          - content: PR Reviewed successfully!
            type: success
          - content: 'I couldn''t seem to find the PR. Please make sure you name your
              PR as ''Task - #'' where # is the task number followed by the name of
              your PR.'
            extra_edges:
            - target_node_id: pr_review
              text: Retry PR
            type: no_matches
          - content: Seems to be an error. Please try again later.
            extra_edges:
            - target_node_id: pr_review
              text: Retry PR
            type: error
          type: conditional
        - content: Ready to go? Let's move on
          type: text
      edges:
      - target_node_id: END
        text: I am good to go, let's move on
      - target_node_id: pr_review
        text: Resubmitted PR, please check again
      id: pr_review
      type: pr_feedback
    - body:
        parts:
        - content: Great! We've completed the expedition! We added much needed documentation
            to the new `Tickets` feature using Generative AI where now the team can
            easily understand the code better.
          type: text
        - content: Hopefully, this gave you insights as to how GitHub Copilot can
            help you document your code efficiently and improve communication across
            teams.
          type: text
      id: END
      type: message
