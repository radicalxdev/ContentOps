tasks:
  - name: "Framework Selection"
    context: "This tutorial guides learners through setting up and using GitHub Copilot Chat to decode complex code structures efficiently. Learners start by preparing their environment with Visual Studio Code, Python, and the necessary GitHub Copilot extensions. They then open the Chat view in Visual Studio Code and use GitHub Copilot Chat to understand new projects by entering commands to receive detailed explanations of the project files. As they progress, they review follow-up questions generated by the AI to build a conversation history. The tutorial then directs them to open a specific project file (app/core/settings/app.py) and use GitHub Copilot Chat to explain the file's contents. Throughout the process, learners interact with GitHub Copilot Chat to gain a comprehensive understanding of their workspace and project files, culminating in generating explanations for specific files."
    id: "1"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Welcome to the mission on generating code explanations using GitHub Copilot Chat! Let's dive into how this powerful tool can help you understand and work with complex codebases efficiently. ðŸ˜Š"
        edges:
          - text: "Yes, let's go!"
            target_node_id: "node_1"
      - id: node_1
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! To prepare your environment, make sure you have the following:"
            - type: "text"
              content: "- Visual Studio Code\n- Python\n- The GitHub Copilot and GitHub Copilot Chat extensions for Visual Studio Code (an active GitHub Copilot subscription is required.)"
            - type: "text"
              content: "If you haven't installed Visual Studio Code and the required extensions, please do so before continuing."
        edges:
          - text: "I've set up my environment"
            target_node_id: "node_2"
      - id: node_2
        type: message
        body:
          parts:
            - type: "text"
              content: "Excellent! Let's start with understanding new projects or specific project files using GitHub Copilot Chat. This feature helps you quickly get up to speed with unfamiliar codebases by providing detailed explanations. Ready to begin?"
        edges:
          - text: "Yes, I'm ready"
            target_node_id: "node_3"
      - id: node_3
        type: message
        body:
          parts:
            - type: "text"
              content: "Awesome! First, let's open the Chat view in Visual Studio Code. You can do this by selecting 'Chat' from the Activity Bar, or by pressing `Ctrl + Alt + I.`"
            - type: "text"
              content: "Once you have the Chat view open, let me know!"
        edges:
          - text: "Chat view is open"
            target_node_id: "node_4"
      - id: node_4
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Now, let's ask GitHub Copilot Chat to explain your project. Enter the following command in the Chat view:"
            - type: "text"
              content: "```@workspace Explain this project```"
            - type: "text"
              content: "Take a moment to review the response generated by GitHub Copilot Chat. When you're ready, let me know how it went!"
        edges:
          - text: "Got it, reviewed the explanation"
            target_node_id: "node_5"
      - id: node_5
        type: message
        body:
          parts:
            - type: "text"
              content: "Fantastic! Did you notice the follow-up question suggested by GitHub Copilot Chat? These questions help build a conversation history, allowing the AI to understand your context better."
            - type: "text"
              content: "If you saw a follow-up question, go ahead and review it. If not, let's move on to the next step."
        edges:
          - text: "Reviewed the follow-up question"
            target_node_id: "node_6"
      - id: node_6
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Now, let's open a specific project file. Please open the app/core/settings/app.py file in the editor. This file contains the code for configuring FastAPI."
            - type: "text"
              content: "Once the file is open, let me know!"
        edges:
          - text: "File is open"
            target_node_id: "node_7"
      - id: node_7
        type: message
        body:
          parts:
            - type: "text"
              content: "Perfect! Now, let's ask GitHub Copilot Chat to explain the app/core/settings/app.py file. Enter the following sequence in the Chat view:"
            - type: "text"
              content: "```@workspace /explain #file:app.py```"
            - type: "text"
              content: "It's possible you may need to press TAB to make sure the command is used. Ultimately, you should see this command in blue. When you're done, let me know how it went!"
        edges:
          - text: "Reviewed the file explanation"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Awesome! Now that you have a good understanding of your workspace and project files, let's dive into generating explanations for specific files."
            - type: "text"
              content: "Ready to continue?"
  - name: "File-Specific Explanations"
    context: "This is a test for context that will be injected to the prompt"
    id: "2"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Please open the app/api/routes/projects.py file in the editor. This file includes the routes for project operations."
            - type: "text"
              content: "Once the file is open, let me know!"
        edges:
          - text: "File is open"
            target_node_id: "node_2"
      - id: node_2
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, let's ask GitHub Copilot Chat to explain this specific file. Enter the following command in the Chat view:"
            - type: "text"
              content: "@workspace /explain #file:projects.py"
            - type: "text"
              content: "Press Enter and review the detailed explanation. When you're ready, let me know how it went!"
        edges:
          - text: "Reviewed the explanation"
            target_node_id: "node_3"
      - id: node_3
        type: message
        body:
          parts:
            - type: "text"
              content: "Fantastic! Now, let's look at how to generate explanations for selected code lines or sections. This is especially useful for understanding complex code. Please select the following lines of code in the projects.py file:"
            - type: "text"
              content: |
                ```python
                @router.put('/{project_id/}', response_model=ProjectResponse)
                async def update_project(project_id: int, project: ProjectCreate, db: Session = Depends(get_db)):
                    db_project = crud.update_project(db, project_id, project.name, project.description)
                    if db_project is None:
                        raise HTTPException(status_code=404, detail=f"Project with id /{project_id/} not found")
                    return db_project
                ```
            - type: "text"
              content: "Now, let's ask GitHub Copilot Chat to explain the selected lines. Right-click the selected code, choose `Copilot`, and then select `Explain This` from the context menu. Alternatively, you can type `#selection` in the Chat view and then enter `Explain this`. Review the generated explanation and let me know how it went!"
        edges:
          - text: "Reviewed the explanation!"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Awesome! Now let's move on to understanding and fixing errors using GitHub Copilot Chat."
  - name: "Selected Code Explanations"
    context: "This is a test for context that will be injected to the prompt"
    id: "3"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Even experienced developers encounter code that's difficult to understand. Rather than spending time trying to decipher complex code, you can ask GitHub Copilot Chat to provide an explanation. Chat view, inline chat, and smart actions can each be used to generate explanations for selected code lines or sections."
            - type: "text"
              content: "In this section of the exercise, you use the Explain This smart action to generate an explanation of selected code lines."
            - type: "text"
              content: "Please open a new Terminal in Visual Studio Code using the shortcut Ctrl + Shift + ``, or open an existing terminal using Ctrl + ``. Once the terminal is open, let me know!"
        edges:
          - text: "Terminal is open"
            target_node_id: "node_1"
      - id: node_1
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Let's start the server using the following command from the root directory:"
            - type: "text"
              content: "```fastapi dev app/main.py```"
            - type: "text"
              content: "This will spin up a FastAPI server in development mode. Once the server is running, let me know!"
        edges:
          - text: "Server is running"
            target_node_id: "node_3"
      - id: node_3
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, let's send a sample request to the running server instance at `http://127.0.0.1:8000/docs`. Open the `POST` endpoint for Projects and click `Try It Out.`"
            - type: "text"
              content: "It's expected that this request will return a 500 internal server error. Once you see the error, let me know!"
        edges:
          - text: "Encountered the error"
            target_node_id: "node_4"
      - id: node_4
        type: message
        body:
          parts:
            - type: "text"
              content: "Perfect! Now let's analyze and trace the error with GitHub Copilot Chat. Highlight the error message in the terminal and bring up the Chat view using `Ctrl + Alt + I.`"
            - type: "text"
              content: "```/explain #terminalSelection```"
            - type: "text"
              content: "Review the generated explanation and let me know how it went!"
        edges:
          - text: "Reviewed the explanation."
            target_node_id: "node_5"
      - id: node_5
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Now let's fix the JSONResponse class TypeError. Ask GitHub Copilot Chat for guidance by entering this command with the error context selected:"
            - type: "text"
              content: "```@workspace #terminalSelection Where do I fix the error?```"
            - type: "text"
              content: "Review the response and apply the suggested fix to the app/api/errors/validation_error.py file. Replace `message` with `content` as shown in the response. This should resolve the error and return a 422 response to the client when making the same request with the same data to http://127.0.0.1:8000/docs."
            - type: "text"
              content: "When sending a valid request such as replacing the 12345 in the sample request to a valid string, we can receive a successful 200 response. Once you've made the changes, save the file and let me know how it went!"
            - type: "text"
              content: "Once you've made the changes, save the file and let me know how it went!"
        edges:
          - text: "Fixed and saved the changes"
            target_node_id: "node_6"
          - text: "Can you give me a hint?"
            target_node_id: "node_5_hint"
      - id: node_5_hint
        type: message
        body:
          parts:
            - type: "text"
              content: "Sure, if you didn't receive the same message from Github Copilot Chat, the main error is coming from the file `app/api/errors/validation_error.py` where the class `JSONResponse` is defined."
            - type: "text"
              content: "Notice how we try to pass the message into the response to send it back to the client when an error occurs in the API. We should instead pass the content into the response. Give it a try!"
        edges:
          - text: "Fixed and saved the changes"
            target_node_id: "node_6"
          - text: "Can I see the solution?"
            target_node_id: "node_5_solution"
      - id: node_5_solution
        type: message
        body:
          parts:
            - type: "text"
              content: "No problem, here is the solution:"
            - type: "text"
              content: "In the JSONResponse's constructor, replace the message with `content`."
            - type: "text"
              content: "Ready to move on?"
        edges:
          - text: "Fixed and saved the changes"
            target_node_id: "node_6"
      - id: node_6
        type: message
        body:
          parts:
            - type: "text"
              content: "Excellent! Save your changes to the app/api/errors/validation_errors.py file. By following these steps, you can use GitHub Copilot Chat to effectively diagnose and resolve errors in your code, enhancing your debugging process and improving your overall development efficiency."
        edges:
          - text: "Got it!"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "In the next section, let's explore how GitHub Copilot Chat can help you implement new features or functionalities."
  - name: "New Feature or Functionality Explanations"
    context: "This is a test for context that will be injected to the prompt"
    id: "4"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "In this section, you will use GitHub Copilot Chat to explain how to manage exceptions during the `GET` `PUT` and `DELETE` operations. This will help enhance the reliability and robustness of your application by providing detailed instructions and code snippets for exception handling."
            - type: "text"
              content: "Please select the code lines that include the GET, PUT, and DELETE operations in the projects.py file"
            - type: "text"
              content: "Once you've selected the lines, let me know!"
        edges:
          - text: "Lines are selected"
            target_node_id: "node_1"
      - id: node_1
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Now, let's ask GitHub Copilot Chat to explain how to handle exceptions for these operations. Enter the following command in the Chat view:"
            - type: "text"
              content: "```@workspace #file:projects.py #selection How can I handle exceptions during the processing of the GET, PUT, and DELETE operations?```"
            - type: "text"
              content: "Review the generated response and let me know how it went!"
        edges:
          - text: "Reviewed the explanation"
            target_node_id: "node_2"
      - id: node_2
        type: message
        body:
          parts:
            - type: "text"
              content: "Fantastic! Now let's implement the suggested error handling code. Accept the proposed code changes by selecting Accept in the Chat view.:"
            - type: "text"
              content: "GitHub Copilot Chat will generate a response that provides a detailed explanation of how to handle exceptions thrown during the download process. You will receive a code snippet that implements the suggested exception handling code."
        edges:
          - text: "Changes implemented and saved"
            target_node_id: "node_3"
      - id: node_3
        type: message
        body:
          parts:
            - type: "text"
              content: "To ask inline chat how to implement exception handling, select the `GET` `PUT` and `DELETE` routes. Press Ctrl + I to open an inline chat and enter the following prompt:"
            - type: "text"
              content: "```How can I handle exceptions thrown during the download process?```"
            - type: "text"
              content: "Take a minute to review the inline response. GitHub Copilot Chat will provide a detailed explanation and a code snippet that demonstrates how to implement exception handling within the ProcessUrlAsync method. To accept the proposed error handling code, select Accept."
        edges:
          - text: "Got it."
            target_node_id: "node_4"
      - id: node_4
        type: message
        body:
          parts:
            - type: "text"
              content: "To ask inline chat how to implement exception handling, select the `GET` `PUT` and `DELETE` routes. Press Ctrl + I to open an inline chat and enter the following prompt:"
            - type: "text"
              content: "```How can I handle exceptions thrown during the download process?```"
            - type: "text"
              content: "Take a minute to review the inline response. GitHub Copilot Chat will provide a detailed explanation and a code snippet that demonstrates how to implement exception handling within the methods."
            - type: "text"
              content: "To accept the proposed error handling code, select Accept."
        edges:
          - text: "Got it!"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Save the changes to app/api/routes/projects.py to ensure the exception handling code is properly integrated."
            - type: "text"
              content: "By following these steps, you will have successfully used GitHub Copilot Chat to enhance your application's reliability by adding robust exception handling. This will help you manage errors during the `GET` `PUT` and `DELETE` operations."
  - name: "Summary"
    context: "This is a test for context that will be injected to the prompt"
    id: "5"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Great job! You've successfully completed the mission on generating code explanations using GitHub Copilot Chat. You've learned how to use GitHub Copilot Chat to understand new projects, specific project files, selected code lines, errors, and new feature implementations."
            - type: "text"
              content: "By utilizing both the inline chat and Chat view, you were able to get assistance directly within the Visual Studio Code environment. GitHub Copilot Chat's AI model generates accurate and useful responses, enhancing your productivity and effectiveness as a developer."
        edges:
          - text: "Awesome!"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "This mission covered:\n 1. Workspace and Project File Explanations: Helping you understand the overall structure and purpose of new projects.\n 2. File-Specific Explanations: Providing detailed insights into individual project files.\n 3. Selected Code Explanations: Offering explanations for specific lines or sections of code.\n 4. Error Explanations: Diagnosing errors and suggesting fixes.\n 5. New Feature or Functionality Explanations: Guiding you through adding new features and handling exceptions."
            - type: "text"
              content: "By following these exercises, you've enhanced your coding workflow and improved your efficiency as a developer. Keep exploring GitHub Copilot Chat to make the most of its powerful features. ðŸ˜Š"
            - type: "text"
              content: "Is there anything else you'd like to learn or any other assistance you need?"
