tasks:
  - name: "Introduction and Setup"
    context: "This tutorial guides learners through setting up and using GitHub Copilot Chat to decode complex code structures efficiently. Learners start by preparing their environment with Visual Studio Code, Python, and the necessary GitHub Copilot extensions. They then open the Chat view in Visual Studio Code and use GitHub Copilot Chat to understand new projects by entering commands to receive detailed explanations of the project files. As they progress, they review follow-up questions generated by the AI to build a conversation history. The tutorial then directs them to open a specific project file (app/core/settings/app.py) and use GitHub Copilot Chat to explain the file's contents. Throughout the process, learners interact with GitHub Copilot Chat to gain a comprehensive understanding of their workspace and project files, culminating in generating explanations for specific files."
    id: "1"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Welcome to your mission at Alfred AI! Today, you'll embark on a journey to master GitHub Copilot Chat and decode complex code effortlessly. Imagine having a personal assistant who can guide you through unfamiliar codebases, explain intricate code sections, diagnose errors, and help you implement new features seamlessly. That's what GitHub Copilot Chat offers you!"
        edges:
          - text: "I'm excited! Let's dive in!"
            target_node_id: "screen2"
          - text: "Tell me more about Github Copilot Chat first."
            target_node_id: "screen2a"
      - id: screen2
        type: message
        body:
          parts:
            - type: "image"
              content: "https://imgs.search.brave.com/mq4HIAJgv0w-CdYoKyAU1x-wjBFykOwrsIxC1Rr4-i0/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9naXRo/dWIuYmxvZy93cC1j/b250ZW50L3VwbG9h/ZHMvMjAyMy8xMi9n/aXRodWItY29waWxv/dC1jaGF0LWdhLnBu/Zz9yZXNpemU9MTYw/MCw4NTA"
            - type: "text"
              content: "GitHub Copilot Chat leverages conversational AI and smart commands to assist you with various coding tasks. Here's how you can use it:"
            - type: "text"
              content: |
                - **Understanding New Projects:** Get a comprehensive overview of an entire workspace or specific project files when joining a new project.
                - **Deciphering Complex Code:** Receive explanations for specific lines or sections of code that are difficult to understand.
                - **Diagnosing Errors:** Obtain insights into why certain lines of code are causing errors and how to fix them.
                - **Implementing Features:** Learn how to add new features to your project with provided code snippets and detailed implementation guidance.
        edges:
          - text: "Got it! What's next?"
            target_node_id: "screen3"
          - text: "Can you give me an example?"
            target_node_id: "screen2a"
      - id: screen2a
        type: message
        body:
          parts:
            - type: "image"
              content: "https://imgs.search.brave.com/Nv-AFX6S2ifAs5BgARdF0-3CROGNQrrrHDTo_uOm9eQ/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9kb2Nz/LmdpdGh1Yi5jb20v/YXNzZXRzL2NiLTEy/ODc4NS9pbWFnZXMv/aGVscC9jb3BpbG90/L2NvcGlsb3Qtc2Ft/cGxlLWNoYXQtcmVz/cG9uc2UucG5n"
            - type: "text"
              content: "Imagine you're looking at a piece of complex code and you're not sure what it does. With GitHub Copilot Chat, you can simply ask for an explanation. For example, you could highlight a function and ask, 'What does this function do?' GitHub Copilot Chat will analyze the code and provide a detailed explanation, helping you understand its purpose and functionality."
        edges:
          - text: "That sounds amazing! Let's continue."
            target_node_id: "screen3"
      - id: screen3
        type: message
        body:
          parts:
            - type: "text"
              content: "To complete the exercises in this mission, you'll need to set up your environment. Here's what you'll need. If you haven't already installed Visual Studio Code and the required extensions, make sure to do so before continuing."
            - type: "text"
              content: |
                - **Visual Studio Code**
                - **GitHub Copilot and GitHub Copilot Chat extensions for Visual Studio Code**
                - **A GitHub account with an active subscription for GitHub Copilot**
                - **Python**
        edges:
          - text: "My environment is ready!"
            target_node_id: "screen4"
          - text: "I need help setting up."
            target_node_id: "screen3a"
      - id: screen3a
        type: message
        body:
          parts:
            - type: "text"
              content: "Follow these steps to set up your environment:"
            - type: "text"
              content: |
                1. **Install Visual Studio Code** from the official website.
                2. **Install GitHub Copilot and GitHub Copilot Chat extensions** from the VS Code marketplace.
                3. **Sign in to your GitHub account** and ensure you have an active Copilot subscription.
                4. **Install Python** from the official website.
                5. **Clone the sample code projects** created using FastAPI from the provided repository.
        edges:
          - text: "Done! Let's move on and good to go."
            target_node_id: "screen4"
      - id: screen4
        type: message
        body:
          parts:
            - type: "text"
              content: "Now that your environment is ready, let's run the application locally. Follow these steps at the root directory of the project:"
            - type: "text"
              content: |
                1. **Install dependencies:** `pip install -r requirements.txt`
                2. **Run the application:** `fastapi dev app/main.py`
                3. **Navigate to [http://localhost:8000](http://localhost:8000/)** to view the application.
            - type: "text"
              content: "This will ensure that everything is set up correctly and you're ready to start the exercise using GitHub Copilot Chat to generate explanations."
        edges:
          - text: "Application is running! What's next?"
            target_node_id: "screen4a"
      - id: screen4a
        type: message
        body:
          parts:
            - type: "text"
              content: "If you're facing issues with running the application locally, here are some common troubleshooting steps:"
            - type: "text"
              content: |
                - **Ensure Python is installed** and added to your system PATH.
                - **Check for dependency issues** and make sure all required packages are installed.
                - **Verify the project directory** and paths are correct.
            - type: "text"
              content: "If you still need help, [consult the project documentation](https://fastapi.tiangolo.com/) for FastAPI. I can also try to look at the error code you're facing and provide a solution!"
        edges:
          - text: "Application is running! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Your environment is ready, and the application is running. Now, let's dive into using GitHub Copilot Chat to decode complex code and enhance your coding workflow. You have just joined the Project Hermes Team at Alfred AI."
  - name: "File-Specific Explanations"
    context: "In this tutorial, learners are guided through setting up and using GitHub Copilot Chat to decode complex code structures efficiently. The process begins with preparing their environment by installing Visual Studio Code, Python, and the necessary GitHub Copilot extensions. Learners are introduced to GitHub Copilot Chat and its features, such as understanding new projects, deciphering complex code, diagnosing errors, and implementing features. They proceed to open the Chat view in Visual Studio Code and use commands to receive detailed explanations of project files. The tutorial includes setting up a specific project file (app/core/settings/app.py) and asking GitHub Copilot Chat for explanations. Learners also troubleshoot common issues and ensure their environment is correctly configured. Throughout the tutorial, they interact with GitHub Copilot Chat to gain a comprehensive understanding of their workspace and project files, enhancing their coding workflow and mastering the use of AI for coding assistance."
    id: "2"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Project Hermes is a new initiative focusing on developing an advanced AI-driven customer support system. Your first task is to get acquainted with the project's structure and specific files using GitHub Copilot Chat. Let's start by understanding the overall architecture and key components."
        edges:
          - text: "File is open"
            target_node_id: "screen7"
          - text: "Can you tell me more about Project Hermes?"
            target_node_id: "screen6a"
      - id: screen6a
        type: message
        body:
          parts:
            - type: "text"
              content: "Project Hermes aims to revolutionize customer interactions with Alfred AI's services through advanced AI technologies. This project is crucial for our company's growth and involves various components working seamlessly together. You'll be exploring these components and understanding their roles in this mission."
        edges:
          - text: "Got it! Let's dive in."
            target_node_id: "screen7"
      - id: screen7
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's get started with GitHub Copilot Chat. First, open the Chat view in Visual Studio Code by selecting 'Chat' from the Activity Bar or by pressing Ctrl + Alt + I. This will allow you to interact with Copilot Chat and request explanations for your project."
        edges:
          - text: "Chat view is open! What's next?"
            target_node_id: "screen8"
          - text: "I need help opening the Chat view."
            target_node_id: "screen7a"
      - id: screen7a
        type: message
        body:
          parts:
            - type: "text"
              content: "To open the Chat view:"
            - type: "text"
              content: |
                1. Click on "Chat" in the Activity Bar on the left side of Visual Studio Code.
                2. Alternatively, press `Ctrl + Alt + I` to open it directly.
                Once open, you'll see a panel where you can type and send commands to GitHub Copilot Chat.
        edges:
          - text: "Got it! I now have the Chat view is open."
            target_node_id: "screen8"
      - id: screen8
        type: message
        body:
          parts:
            - type: "image"
              content: "https://imgs.search.brave.com/xPAvmER43tBObL6qBjdrFQ_wAGZwJbDsxuIDHGT4UCM/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9jb2Rl/LnZpc3VhbHN0dWRp/by5jb20vYXNzZXRz/L2RvY3MvY29waWxv/dC9jb3BpbG90LWNo/YXQvZGV2Y29udGFp/bmVyLWV4cGxhaW4u/cG5n"
            - type: "text"
              content: "In the Chat view, ask GitHub Copilot Chat to explain the project by entering the following command: This will provide you with a comprehensive overview of the project's architecture, key components, and how different modules interact with each other."
            - type: "text"
              content: "`@workspace Explain this project"
        edges:
          - text: "Entered the command. What's next?"
            target_node_id: "screen9"
          - text: "I need help with this step."
            target_node_id: "screen8a"
      - id: screen8a
        type: message
        body:
          parts:
            - type: "text"
              content: "Ensure you type the command exactly as shown: @workspace Explain this project. This will prompt GitHub Copilot Chat to provide a detailed explanation of your project. If you're still having trouble, double-check the spelling and try again."
        edges:
          - text: "Got it! What's next?"
            target_node_id: "screen9"
      - id: screen9
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the response generated by GitHub Copilot Chat. This explanation will give you insights into the overall architecture, key components, and how different modules interact within Project Hermes."
        edges:
          - text: "Reviewed it! So, what do we next?"
            target_node_id: "screen10"
      - id: screen10
        type: message
        body:
          parts:
            - type: "image"
              content: "https://firebasestorage.googleapis.com/v0/b/reality-ai-b2b-sandbox.appspot.com/o/Mission%201%2Fapp.py.png?alt=media&token=03a91d6a-0310-4562-9228-a16370eb7e5e"
            - type: "text"
              content: "Now, let's dive into a specific project file. Open the app/core/settings/app.py file in the editor. This file contains the code for configuring FastAPI by setting BaseAppSettings with default values and initializing its keyword arguments within the main.py."
        edges:
          - text: "File is open! What is next from here?"
            target_node_id: "screen11"
      - id: screen11
        type: message
        body:
          parts:
            - type: "image"
              content: "https://firebasestorage.googleapis.com/v0/b/reality-ai-b2b-sandbox.appspot.com/o/Mission%201%2Fapp.py.png?alt=media&token=03a91d6a-0310-4562-9228-a16370eb7e5e"
            - type: "text"
              content: "In the Chat view, ask GitHub Copilot Chat to explain the app/core/settings/app.py file by entering the following command:"
            - type: "text"
              content: "`@workspace /explain #file:app.py`"
        edges:
          - text: "Entered the command for Copilot. What's next?"
            target_node_id: "screen12"
      - id: screen12
        type: message
        body:
          parts:
            - type: "image"
              content: "https://file.notion.so/f/f/43a92826-71a1-4057-8884-809bc640049f/619c077b-8b5b-4c6e-90ad-432422a2a8fa/Untitled.png?id=666d4d53-907f-41bc-a743-0dc6ff311cef&table=block&spaceId=43a92826-71a1-4057-8884-809bc640049f&expirationTimestamp=1721311200000&signature=rGrdjuktVNeJfxo1QnqEl9kHs09FtIssSco78uo70l8&downloadName=Untitled.png"
            - type: "text"
              content: "Here is a sample of the detailed explanation generated by GitHub Copilot Chat. Take a minute to review the detailed explanation generated by GitHub Copilot Chat. This explanation includes information about the file's purpose, structure, and key components, helping you understand how it fits into the overall project."
        edges:
          - text: "Reviewed app.py's explanation! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! You've successfully used GitHub Copilot Chat to understand the overall project structure and a specific project file. This is just the beginning. GitHub Copilot Chat can help you with many more coding tasks. Let's keep going!"
  - name: "Detailed File Explanations"
    context: "learners delve deeper into individual files within Project Hermes to enhance their understanding of the project's structure. They start by generating detailed explanations for specific files using GitHub Copilot Chat, beginning with the app/api/routes/projects.py file. This process involves opening the file in the editor and asking GitHub Copilot Chat to explain its purpose, structure, and key components. The tutorial emphasizes the importance of understanding individual files for effective debugging, feature enhancement, and overall project development. Learners review the explanations provided by GitHub Copilot Chat, gaining valuable insights into how each file fits into the overall project. This detailed exploration helps them build a robust understanding of the codebase, enabling them to use Copilot Chat more effectively for generating context-rich explanations and improving their coding workflow."
    id: "3"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Now that you have a grasp on the overall project structure, it's time to dive deeper into individual files within Project Hermes. Understanding these files is crucial for debugging, enhancing features, and ensuring smooth project development. Let's start by generating detailed explanations for specific files using GitHub Copilot Chat."
        edges:
          - text: "How do I generate detailed explanations for specific files?"
            target_node_id: "screen15"
          - text: "Can you explain why this is important?"
            target_node_id: "screen14a"
      - id: screen14a
        type: message
        body:
          parts:
            - type: "text"
              content: "Generating detailed explanations for individual files helps you understand their purpose, structure, and key components. This knowledge is essential for:"
            - type: "text"
              content: |
                - Debugging: Identifying and fixing errors efficiently.
                - Enhancing Features: Adding new features with a clear understanding of the existing code.
                - Project Development: Ensuring smooth and consistent progress.
        edges:
          - text: "Got it! Let's move on"
            target_node_id: "screen15"
      - id: screen15
        type: message
        body:
          parts:
            - type: "image"
              content: "https://firebasestorage.googleapis.com/v0/b/reality-ai-b2b-sandbox.appspot.com/o/Mission%201%2Fprojects.py.png?alt=media&token=cdfc9fd8-dc27-44f0-8d22-7186097afbdf"
            - type: "text"
              content: "Great! Let's start with the `app/api/routes/projects.py` file. Ensure that you have this file open in the editor. This file includes the routes for project operations, a crucial part of Project Hermes."
        edges:
          - text: "File is open! What's next?"
            target_node_id: "screen16"
      - id: screen16
        type: message
        body:
          parts:
            - type: "text"
              content: "In the Chat view, ask GitHub Copilot Chat to explain the `app/api/routes/projects.py` file by entering the following command: This will generate a detailed explanation of the file's purpose, structure, and key components."
            - type: "text"
              content: "`@workspace /explain #file:projects.py`"
        edges:
          - text: "I entered the command. What's next?"
            target_node_id: "screen17"
      - id: screen17
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the detailed explanation generated by GitHub Copilot Chat. This explanation includes information about the file's purpose, structure, and key components, helping you understand how it fits into the overall project."
        edges:
          - text: "Reviewed it! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! You've successfully used GitHub Copilot Chat to understand the purpose and structure of a specific project file. Let's keep going! You should use the commands with Copilot to help provide more context to your questions and ultimately create better explanations."
  - name: "Understanding Complex Code"
    context: "learners are guided to use GitHub Copilot Chat for generating detailed explanations of complex code lines or sections. This task begins with opening the app/api/routes/projects.py file, focusing on understanding specific code sections critical for project operations. Learners are instructed to select a particular method, such as update_project, and use GitHub Copilot Chat to generate explanations for the selected code. They are shown how to right-click and select the 'Explain This' option or use the Chat view to input the command for explanation. By reviewing the generated explanation, learners gain insights into the method's purpose, functionality, and key components. This process enhances their ability to debug, enhance features, and save time by comprehending complex code efficiently. The task emphasizes the importance of understanding detailed code explanations to improve their coding workflow and overall project development."
    id: "4"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "As a developer at Alfred AI, you'll often encounter complex code that's challenging to understand. GitHub Copilot Chat can assist you by generating detailed explanations for selected code lines or sections. This capability is invaluable for debugging and enhancing features. Let's explore how to make the most of this powerful tool."
        edges:
          - text: "How do I use GitHub Copilot to generate code explanations?"
            target_node_id: "screen20"
          - text: "Can you tell me more about the benefits?"
            target_node_id: "screen19a"
      - id: screen19a
        type: message
        body:
          parts:
            - type: "text"
              content: "Understanding complex code is crucial for several reasons:"
            - type: "text"
              content: |
                - **Debugging:** Quickly identify and fix errors.
                - **Enhancing Features:** Add new features with a clear understanding of the existing code.
                - **Efficiency:** Save time by comprehending code faster and more accurately.
        edges:
          - text: "Got it! Let's move on."
            target_node_id: "screen20"
      - id: screen20
        type: message
        body:
          parts:
            - type: "image"
              content: "https://firebasestorage.googleapis.com/v0/b/reality-ai-b2b-sandbox.appspot.com/o/Mission%201%2Fprojects.py.png?alt=media&token=cdfc9fd8-dc27-44f0-8d22-7186097afbdf"
            - type: "text"
              content: "Great! Let's start by opening the `app/api/routes/projects.py` file in the editor. This file includes important routes for project operations, and we'll focus on understanding specific sections of it."
        edges:
          - text: "File is open! What's next?"
            target_node_id: "screen21"
      - id: screen21
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, let's focus on a specific section of the file. Locate and select the following lines of code for the update_project method:"
            - type: "text"
              content: |
                ```python
                @router.put('{{project_id}}', response_model=ProjectResponse)
                async def update_project(project_id: int, project: ProjectCreate, db: Session = Depends(get_db)):
                    db_project = crud.update_project(db, project_id, project.name, project.description)
                    if db_project is None:
                        raise HTTPException(status_code=404, detail=f"Project with id {{project_id}} not found")
                    return db_project
                ```
        edges:
          - text: "Code is selected! What's next?"
            target_node_id: "screen22"
      - id: screen22
        type: message
        body:
          parts:
            - type: "text"
              content: "With the code selected, right-click, choose Copilot, and then select Explain This from the context menu. Alternatively, you can use the Chat view to explain specific code lines by typing #selection and entering 'Explain this.'"
        edges:
          - text: "Entered the command. What is next?"
            target_node_id: "screen23"
      - id: screen23
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the detailed explanation generated by GitHub Copilot Chat. Notice the level of detail included, such as the purpose of the method, how it works, and any important components."
        edges:
          - text: "I Reviewed it! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! You've successfully used GitHub Copilot Chat to generate detailed explanations for specific code lines. This will help you understand complex code more quickly and efficiently. Next, let's see how we can use Copilot for error explanations"
  - name: "Diagnosing and Resolving Errors"
    context: "In the task, learners are guided to use GitHub Copilot Chat for debugging and fixing errors in their code, which is crucial for maintaining smooth project functionality and improving code quality at Alfred AI. The task begins with learners opening a terminal and starting the FastAPI server using a specified command. They then navigate to the running server instance and send a sample request to the /api/projects endpoint, which is expected to return a 500 internal server error. Once the error is encountered, learners highlight the error traceback in the terminal and use GitHub Copilot Chat to diagnose the issue by explaining the error. The tutorial directs them to review the explanation, which identifies a TypeError in the JSONResponse class. Learners then ask Copilot for guidance on fixing the error and are instructed to make specific changes in the app/api/errors/validation_error.py file to resolve it. After applying the fix, they restart the server and resend the request to ensure the error is resolved, confirming that the issue has been successfully fixed. This process enhances their ability to diagnose and resolve errors efficiently, leading to improved code quality and increased productivity."
    id: "5"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Debugging is a crucial part of development at Alfred AI. When errors occur, GitHub Copilot Chat can help diagnose and resolve them, ensuring smooth project functionality and improving code quality. Let's dive into how to use this tool for error management."
        edges:
          - text: "Let's Begin!"
            target_node_id: "screen26"
          - text: "Can you tell me more about the benefits first?"
            target_node_id: "screen25a"
      - id: screen25a
        type: message
        body:
          parts:
            - type: "text"
              content: "Diagnosing and resolving errors efficiently has several benefits:"
            - type: "text"
              content: |
                - **Improved Code Quality:** Quickly identify and fix issues.
                - **Increased Productivity:** Spend less time troubleshooting.
                - **Enhanced Stability:** Ensure your project runs smoothly.
        edges:
          - text: "Got it, let's get started!"
            target_node_id: "screen26"
      - id: screen26
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's start by opening a new Terminal. You can do this by using the keyboard shortcut Ctrl + Shift + or by opening an existing terminal using Ctrl +. Once the terminal is open, let me know."
        edges:
          - text: "Terminal is open! What's next?"
            target_node_id: "screen27"
      - id: screen27
        type: message
        body:
          parts:
            - type: "text"
              content: "Next, start the server using the following command from the root directory: This will spin up a FastAPI server in development mode. Let me know once the server is running."
            - type: "text"
              content: "`fastapi dev app/main.py`"
        edges:
          - text: "Server is running! What is next?"
            target_node_id: "screen28"
      - id: screen28
        type: message
        body:
          parts:
            - type: "text"
              content: "Navigate to the running server instance at `http://127.0.0.1:8000/docs`. Send a sample request to the `/api/projects` endpoint by opening the POST endpoint, clicking 'Try It Out,' and executing the following request: It is expected that this request will return a 500 internal server error. Let me know once you encounter the error."
            - type: "text"
              content: |
                {{
                  "name": 12345,
                  "description": "This is a test project"
                }}
        edges:
          - text: "Encountered the error! What's next?"
            target_node_id: "screen29"
      - id: screen29
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's analyze and trace the error using GitHub Copilot Chat. Highlight the error encountered in the terminal from the end to the start of the traceback message. The more information you include, the better Copilot can resolve the error. Bring up the Copilot chat using `Ctrl + Alt + I` and send the following command:Review the response to understand the cause of the error."
            - type: "text"
              content: "`/explain #terminalSelection`"
        edges:
          - text: "Done! What's next"
            target_node_id: "screen30"
      - id: screen30
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the response in the Chat view. Notice that the response includes information about the error and suggestions for fixing it. In this case, GitHub Copilot explains that there is a TypeError raised when initializing a `JSONResponse` class."
            - type: "text"
              content: "`/explain #terminalSelection`"
        edges:
          - text: "Understood. Let's fix it."
            target_node_id: "screen31"
      - id: screen31
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, let's fix the TypeError in the `JSONResponse` class. Ask GitHub Copilot to help you by pointing you in the right direction, then review GitHub Copilot's recommendation to resolve the issue."
            - type: "text"
              content: "`@workspace #terminalSelection Where do I fix the error?`"
        edges:
          - text: "Done! What is next?"
            target_node_id: "screen32"
      - id: screen32
        type: message
        body:
          parts:
            - type: "text"
              content: "Head to the `app/api/errors/validation_error.py` file and replace the message property of the `JSONResponse` class with content as follows, then save your changes to the `app/api/errors/validation_error.py` file."
            - type: "text"
              content: |
                ```python
                async def http422_error_handler(_: Request, exc: RequestValidationError):
                errors = []
                for error in exc.errors():
                    field = " -> ".join(str(loc) for loc in error['loc'])
                    message = error['msg']
                    error_detail = f"Error in field '{{field}}': {{message}}"
                    errors.append(error_detail)

                error_response = ErrorResponse(status=422, message=errors)
                return JSONResponse(
                    status_code=422,
                    content=error_response.model_dump()
                )
                ```
        edges:
          - text: "Done! What do we do next?"
            target_node_id: "screen33"
      - id: screen33
        type: message
        body:
          parts:
            - type: "text"
              content: "Great job! Now that you've applied the fix, let's test it. Restart your server and send the request again to ensure the error is resolved. Once you confirm the fix, we'll wrap up this lesson."
            - type: "text"
              content: "In case you need the request again, it is as follows. It should return a 422 response and help identify the validation error when sending a request to the API."
            - type: "text"
              content: |
                ```json
                {{
                  "name": 12345,
                  "description": "This is a test project"
                }}
                ```
        edges:
          - text: "Done! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Excellent work! You've successfully diagnosed and resolved an error using GitHub Copilot Chat. This skill is crucial for maintaining high code quality and efficiency. "
  - name: "Implementing New Features with Generative AI"
    context: "Learners explore implementing new features with proper exception handling using GitHub Copilot Chat. They begin by understanding the importance of exception handling for maintaining application stability, improving user experience, and easing debugging. Learners then select the GET, PUT, and DELETE operations in the projects.py file and ask GitHub Copilot Chat for guidance on handling exceptions during these operations. Following detailed instructions from Copilot, they review and implement the suggested exception handling code within these methods, incorporating try-catch blocks to manage errors gracefully. After accepting and applying the proposed changes, learners save the updated projects.py file, ensuring their new features are robust and reliable. This task enhances their ability to use AI tools for adding features with proper error management, ultimately improving the quality and stability of their applications."
    id: "6"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Next, let's explore how to implement new features with proper exception handling using GitHub Copilot Chat."
        edges:
          - text: "I'm ready!"
            target_node_id: "screen36"
          - text: "Can you explain the importance of exception handling?"
            target_node_id: "screen35a"
      - id: screen35a
        type: message
        body:
          parts:
            - type: "text"
              content: "Exception handling is crucial because it helps:"
            - type: "text"
              content: |
                - **Maintain Application Stability**: Prevents crashes by managing errors gracefully.
                - **Improve User Experience**: Provides informative error messages instead of system failures.
                - **Ease Debugging**: Makes it easier to identify and fix issues.
        edges:
          - text: "Understood. Let's move on!"
            target_node_id: "screen36"
      - id: screen36
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's start by selecting the relevant code lines that include the GET, PUT, and DELETE operations in the projects.py file. Here's the code you need:"
            - type: "text"
              content: |
                ```python
                @router.get('/{{project_id}}', response_model=ProjectResponse)
                async def read_project(project_id: int, db: Session = Depends(get_db)):
                    db_project = crud.get_project(db, project_id)
                    return db_project

                @router.put('/{{project_id}}', response_model=ProjectResponse)
                async def update_project(project_id: int, project: ProjectCreate, db: Session = Depends(get_db)):
                    db_project = crud.update_project(db, project_id, project.name, project.description)
                    return db_project

                @router.delete('/{{project_id}}')
                async def delete_project(project_id: int, db: Session = Depends(get_db)):
                    crud.delete_project(db, project_id)
                    return {{'message': f'Project with id {{project_id}} deleted'}}
                ```
        edges:
          - text: "Selected the code lines! What's next?"
            target_node_id: "screen37"
      - id: screen37
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, let's ask GitHub Copilot Chat to explain how to handle exceptions thrown during these operations. Open the Chat view and enter the following command:"
            - type: "text"
              content: "`@workspace #file:projects.py #selection How can I handle exceptions during the processing of the GET, PUT, and DELETE operations?`"
        edges:
          - text: "Done! So, What's next?"
            target_node_id: "screen38"
      - id: screen38
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the response in the Chat view. GitHub Copilot Chat will generate a detailed explanation of how to handle exceptions during the GET, PUT, and DELETE operations. This includes a code snippet that demonstrates the suggested exception handling code."
        edges:
          - text: "Understood. Let's implement it!"
            target_node_id: "screen39"
      - id: screen39
        type: message
        body:
          parts:
            - type: "text"
              content: "To get detailed instructions on implementing exception handling, select the GET, PUT, and DELETE routes. Then, press `Ctrl + I` to open an inline chat and enter the following prompt:"
            - type: "text"
              content: "#selection How can I handle exceptions thrown during the CRUD operations?"
        edges:
          - text: "Sent! What's next? "
            target_node_id: "screen40"
      - id: screen40
        type: message
        body:
          parts:
            - type: "text"
              content: "Take a minute to review the inline response. GitHub Copilot Chat will provide a detailed explanation and a code snippet that demonstrates how to implement exception handling within the methods."
            - type: "text"
              content: "#selection How can I handle exceptions thrown during the CRUD operations?"
        edges:
          - text: "Understood. Let's implement it!"
            target_node_id: "screen41"
      - id: screen41
        type: message
        body:
          parts:
            - type: "text"
              content: "To accept the proposed error handling code, select Accept in the Chat view. The proposed try-catch block will be implemented in the GET, PUT, and DELETE route functions:"
            - type: "text"
              content: |
                ```python
                @router.get('/{{project_id}}', response_model=ProjectResponse)
                async def read_project(project_id: int, db: Session = Depends(get_db)):
                    try:
                        db_project = crud.get_project(db, project_id)
                        return db_project
                    except Exception as e:
                        raise HTTPException(status_code=500, detail=str(e))

                @router.put('/{{project_id}}', response_model=ProjectResponse)
                async def update_project(project_id: int, project: ProjectCreate, db: Session = Depends(get_db)):
                    try:
                        db_project = crud.update_project(db, project_id, project.name, project.description)
                        return db_project
                    except Exception as e:
                        raise HTTPException(status_code=500, detail=str(e))

                @router.delete('/{{project_id}}')
                async def delete_project(project_id: int, db: Session = Depends(get_db)):
                    try:
                        crud.delete_project(db, project_id)
                        return {{'message': f'Project with id {{project_id}} deleted'}}
                    except Exception as e:
                        raise HTTPException(status_code=500, detail=str(e))
                ```
        edges:
          - text: "Understood. Let's implement it!"
            target_node_id: "screen42"
      - id: screen42
        type: message
        body:
          parts:
            - type: "text"
              content: "Save the changes to `app/api/routes/projects.py` to ensure the exception handling code is properly integrated."
        edges:
          - text: "I saved the changes."
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Fantastic! You've successfully implemented new features with proper exception handling using GitHub Copilot Chat. This ensures your application is reliable and robust."
  - name: "Summary & Recap"
    context: "In this comprehensive tutorial, learners at Alfred AI are guided through setting up and using GitHub Copilot Chat to decode complex code structures, understand detailed file explanations, diagnose, and resolve errors efficiently. The journey begins with preparing their environment by installing Visual Studio Code, Python, and the necessary GitHub Copilot extensions. Learners use GitHub Copilot Chat to gain insights into new projects and specific project files, enhancing their ability to debug, add features, and maintain project development. They delve deeper into individual files, like app/api/routes/projects.py, using Copilot to generate detailed explanations. This understanding aids in troubleshooting complex code and improving workflow. The tutorial also covers diagnosing and fixing errors by using GitHub Copilot Chat to analyze error tracebacks and apply recommended fixes, such as resolving a TypeError in the JSONResponse class. By restarting the server and confirming the fixes, learners enhance their skills in maintaining high code quality and efficiency, ultimately mastering the use of AI tools to streamline their coding tasks."
    id: "7"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's recap what we've covered and how this enhances your development workflow."
        edges:
          - text: "Great, let's recap!"
            target_node_id: "screen45"
      - id: screen45
        type: message
        body:
          parts:
            - type: "text"
              content: "Here's a recap of what we covered in this mission:"
            - type: "text"
              content: |
                1. **Workspace and Project File Explanations**: Understanding the structure and purpose of new projects.
                2. **File-Specific Explanations**: Gaining detailed insights into individual project files.
                3. **Selected Code Explanations**: Explaining specific lines or sections of code.
                4. **Error Explanations**: Diagnosing errors and suggesting fixes.
                5. **New Feature Implementations**: Adding new features and handling exceptions.
        edges:
          - text: "Great, what's next?"
            target_node_id: "screen46"
      - id: screen46
        type: message
        body:
          parts:
            - type: "text"
              content: "By leveraging GitHub Copilot Chat, you've improved your coding workflow by:"
            - type: "text"
              content: |
                - **Quickly Understanding New Projects**: Getting up to speed with unfamiliar codebases.
                - **Efficiently Deciphering Complex Code**: Receiving detailed explanations for challenging code.
                - **Effectively Diagnosing and Resolving Errors**: Enhancing your debugging process.
                - **Smoothly Implementing New Features**: Adding robust functionality with proper error handling.
        edges:
          - text: "Sounds good! What's next?"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Excellent work! You're now well-equipped to use GitHub Copilot Chat to improve your coding efficiency. Up next, you'll dive deeper into advanced features and best practices. Ready to continue your learning journey?"
