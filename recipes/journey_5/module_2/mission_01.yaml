tasks:
  - name: "Introduction"
    context: "This task introduces the user to the mission at Alfred AI. The objective is to set up a streamlined CI/CD pipeline for the Project Management application to ensure efficient and reliable deployment. The introduction explains the importance of automating the deployment process to Google Cloud Run using GitHub Actions and leveraging GitHub Copilot to assist in this setup. It emphasizes the goal of the mission, which is to automate and streamline the deployment process."
    id: "1"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Welcome to your mission at Alfred AI! Today, you'll be setting up a streamlined CI/CD pipeline for the Project Management application to ensure efficient and reliable deployment. As the team at Alfred AI is preparing the Project Management application for production, it's crucial to automate the deployment process to Google Cloud Run using GitHub Actions. This mission will guide you through leveraging GitHub Copilot to assist with setting up this pipeline.

                Are you ready to embark on this journey to automate and streamline your deployment process?
        edges:
          - text: "Tell me more about the mission."
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Continuous Integration and Continuous Deployment (CI/CD) pipelines are essential for modern software development, allowing teams to automate testing and deployment processes, thus reducing manual effort and minimizing errors. In this mission, you will learn how to use GitHub Actions to create a CI/CD pipeline that automatically builds, tests, and deploys the Project Management application to Google Cloud Run whenever changes are pushed to the main branch.

                Using AI-powered tools like GitHub Copilot can significantly streamline this process by providing real-time suggestions, generating configuration files, and troubleshooting issues. By the end of this mission, you will have a fully functional CI/CD pipeline that deploys your application to Google Cloud Run automatically.

                Ready to get started?

  - name: "Setting Up Prerequisites"
    context: "This task guides the user through setting up the necessary prerequisites for the mission. It ensures the user has a basic understanding of CI/CD concepts, familiarity with Docker and GitHub, access to the Project Management GitHub repository, and a Google Cloud project with billing enabled. It then walks the user through setting up a Google Cloud account, creating a service account, enabling required APIs, and storing the service account key in GitHub Secrets, all of which are essential steps for deploying the application to Google Cloud Run."
    id: "2"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Before you begin this mission, ensure you have the following prerequisites in place:

                - **Basic Understanding of CI/CD Concepts:** Familiarity with the principles of continuous integration and continuous deployment.
                - **Familiarity with Docker and GitHub:** Experience with Docker for containerization and GitHub for version control.
                - **Access to the Project Management GitHub Repository:** Ensure you have access to the repository with a Dockerfile already set up.
                - **Google Cloud Project with Billing Enabled:** A Google Cloud project with billing enabled to use Google Cloud Run.

                Shall we proceed with setting up your Google Cloud account and service account?
        edges:
          - text: "Yes, let's set up Google Cloud!"
            target_node_id: "screen3"
          - text: "Tell me more about Google Cloud."
            target_node_id: "screen2a"
      - id: screen2a
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Google Cloud provides a suite of cloud computing services that run on the same infrastructure that Google uses internally for its end-user products. Google Cloud Run, a fully managed compute platform, enables you to run stateless containers that are invocable via HTTP requests.

                Would you like to set up your Google Cloud account now?
        edges:
          - text: "Yes, let's set up Google Cloud!"
            target_node_id: "screen3"
      - id: screen3
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's start by setting up your Google Cloud account and creating a service account with the necessary permissions for deploying your application to Google Cloud Run.

                Ready to proceed?
        edges:
          - text: "Yes, let's create the Google Cloud account!"
            target_node_id: "screen3a"
      - id: screen3a
        type: message
        body:
          parts:
            - type: "text"
              content: |
                To create a Google Cloud account, visit [Google Cloud](https://cloud.google.com/) and follow the sign-up instructions. Make sure to set up billing to use Google Cloud services.

                **Steps to Follow:**

                1. **Create a Google Cloud Account:**
                    - Sign up at [Google Cloud](https://cloud.google.com/).
                    - Set up billing for your account to enable the use of Google Cloud Run services.

                Have you completed this step?
        edges:
          - text: "Yes, I've created the account!"
            target_node_id: "screen3b"
          - text: "I need help."
            target_node_id: "screen3c"
      - id: screen3b
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Next, let's create a new project in Google Cloud.

                **Steps to Follow:**

                1. **Create a New Project:**
                    - Go to the [Google Cloud Console](https://console.cloud.google.com/).
                    - Click on the project dropdown menu at the top of the page and select **New Project**.
                    - Enter a name for your project and click **Create**.

                Have you created the new project?
        edges:
          - text: "Yes, I've created the project!"
            target_node_id: "screen3c"
          - text: "I need help."
            target_node_id: "screen3d"
      - id: screen3c
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Now, let's enable the required APIs.

                **Steps to Follow:**

                1. **Enable Required APIs:**
                    - Navigate to **APIs & Services** > **Library**.
                    - Enable the following APIs:
                        - Cloud Run API
                        - Cloud Build API
                        - Container Registry API

                Have you enabled the required APIs?
        edges:
          - text: "Yes, APIs are enabled!"
            target_node_id: "screen3d"
      - id: screen3d
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's create a service account in Google Cloud Console.

                **Steps to Follow:**

                1. **Create a Service Account:**
                    - In the Google Cloud Console, go to **IAM & Admin** > **Service Accounts**.
                    - Click **Create Service Account**.
                    - Enter a name for your service account and click **Create**.
                    - Assign the following roles to the service account:
                        - **Cloud Run Admin**
                        - **Service Account User**
                        - **Storage Admin**
                    - Click **Done**.

                Have you created the service account?
        edges:
          - text: "Yes, I've created the service account!"
            target_node_id: "screen3e"
      - id: screen3e
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Next, we need to generate and download a JSON key for the service account.

                **Steps to Follow:**

                1. **Generate and Download a JSON Key:**
                    - Find your newly created service account in the list.
                    - Click on the **Actions** column (three vertical dots) and select **Manage Keys**.
                    - Click **Add Key** > **Create New Key**.
                    - Select **JSON** and click **Create** to download the key file to your local machine.

                Have you generated and downloaded the JSON key?
        edges:
          - text: "Yes, I've downloaded the JSON key!"
            target_node_id: "screen3f"
      - id: screen3f
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Now, let's store the service account key in GitHub Secrets.

                **Steps to Follow:**

                1. **Store the Service Account Key in GitHub Secrets:**
                    - In your GitHub repository, navigate to **Settings** > **Secrets** > **Actions**.
                    - Click **New repository secret**.
                    - Add a new secret with the name `GCP_SA_KEY`.
                    - Open the downloaded JSON key file, copy its contents, and paste it into the value field of the secret.

                Have you added the service account key to GitHub Secrets?
        edges:
          - text: "Yes, I've added the secret!"
            target_node_id: "END"

      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Thank you for completing the prerequisites setup. You are now ready to proceed with setting up the CI/CD pipeline using GitHub Actions to deploy the Project Management application to Google Cloud Run.

                Shall we continue with the mission?
  - name: "GitHub Actions Workflow Setup"
    context: "This task guides the user through setting up a GitHub Actions workflow that triggers a deployment to Google Cloud Run when a pull request is merged into the main branch. It involves creating the necessary directory structure, defining the workflow trigger, adding jobs to the workflow for checking out code, setting up Google Cloud SDK, building and pushing a Docker image, and deploying to Google Cloud Run. The task ensures that the user creates and commits the workflow YAML file correctly."
    id: "3"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's set up a GitHub Actions workflow that triggers a deployment to Google Cloud Run when a pull request is merged into the main branch.

                Ready to proceed?
        edges:
          - text: "Yes, let's create the workflow!"
            target_node_id: "screen4a"
      - id: screen4a
        type: message
        body:
          parts:
            - type: "text"
              content: |
                First, we need to create the GitHub Actions directory.

                **Steps to Follow:**

                1. **Navigate to Your Repository:**
                    - Open your GitHub repository in a web browser.
                2. **Create the GitHub Actions Directory:**
                    - In the root directory of your repository, create a new directory named `.github/workflows`.

                Have you created the directory?
        edges:
          - text: "Yes, I've created the directory!"
            target_node_id: "screen4b"
      - id: screen4b
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Next, let's create the workflow YAML file.

                **Steps to Follow:**

                1. **Create the Workflow YAML File:**
                    - Inside the `.github/workflows` directory, create a new file named `deploy.yml`.

                Have you created the YAML file?
        edges:
          - text: "Yes, I've created the file!"
            target_node_id: "screen4c"
      - id: screen4c
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's define the workflow trigger.

                **Steps to Follow:**

                1. **Open the `deploy.yml` file in your code editor.**
                2. **Add the following configuration to specify that the workflow should trigger on a pull request merge to the `main` branch:**
                
                ```yaml
                name: Deploy to Google Cloud Run

                on:
                  pull_request:
                    types: [closed]
                    branches:
                      - main
                ```

                Have you added the workflow trigger?
        edges:
          - text: "Yes, I've added the trigger!"
            target_node_id: "screen4d"
      - id: screen4d
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Next, let's add jobs to the workflow.

                **Steps to Follow:**

                1. **Define the jobs that will run when the workflow is triggered. Add the following configuration to the `deploy.yml` file:**
                ```yaml
                jobs:
                  deploy:
                    name: Deploy
                    runs-on: ubuntu-latest

                    steps:
                    - name: Checkout code
                      uses: actions/checkout@v2

                    - name: Set up Google Cloud SDK
                      uses: google-github-actions/setup-gcloud@master
                      with:
                        version: 'latest'
                        project_id: ${{ secrets.GCP_PROJECT_ID }}
                        service_account_key: ${{ secrets.GCP_SA_KEY }}

                    - name: Build Docker image
                      run: |
                        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/project-management-app:${{ github.sha }} .
                        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/project-management-app:${{ github.sha }}

                    - name: Deploy to Google Cloud Run
                      run: |
                        gcloud run deploy project-management-app \\
                          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/project-management-app:${{ github.sha }} \\
                          --platform managed \\
                          --region us-central1 \\
                          --allow-unauthenticated
                ```

                Have you added the jobs?
        edges:
          - text: "Yes, I've added the jobs!"
            target_node_id: "screen4e"
      - id: screen4e
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Finally, let's save and commit the workflow file.

                **Steps to Follow:**

                1. **Save the `deploy.yml` file.**
                2. **Commit and push the file to the repository.**
                
                ```bash
                git add .github/workflows/deploy.yml
                git commit -m "Add GitHub Actions workflow for deploying to Google Cloud Run"
                git push origin main
                ```

                Have you committed the workflow file?
        edges:
          - text: "Yes, I've committed the file!"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's ensure that the GitHub Actions workflow correctly triggers on a pull request merge to the main branch, and validate that the deployment to Google Cloud Run occurs as expected.

                Ready to test the pipeline?
  - name: "Testing and Troubleshooting"
    context: "This task guides the user through testing and troubleshooting the CI/CD pipeline. It involves pushing changes to trigger the workflow, monitoring the execution, and verifying the deployment. If issues arise during the workflow execution, the task provides steps for troubleshooting, including checking for errors in logs, verifying configuration, and inspecting Google Cloud Run logs. The task ensures the user can identify and resolve issues, ensuring a reliable CI/CD process."
    id: "4"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's push changes to trigger the workflow.

                **Steps to Follow:**

                1. **Create a Test Branch:**
                    - Create a new branch in your local repository. For example:
                    ```bash
                    git checkout -b test-ci-cd
                    ```

                2. **Make a Test Change:**
                    - Make a minor change to a file in your repository (e.g., update a README or add a simple comment).
                    - Commit the change and push it to the remote repository:
                    
                    ```bash
                    git add .
                    git commit -m "Test CI/CD pipeline"
                    git push origin test-ci-cd
                    ```

                3. **Create a Pull Request:**
                    - Open your GitHub repository and create a pull request from `test-ci-cd` to `main`.
                    - Complete the pull request process to merge the changes.

                Have you completed these steps?
        edges:
          - text: "Yes, I've done this!"
            target_node_id: "screen5b"
          - text: "I need help."
            target_node_id: "screen5c"
      - id: screen5b
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Let's monitor the workflow execution.

                **Steps to Follow:**

                1. **Access GitHub Actions:**
                    - Go to the **Actions** tab in your GitHub repository.
                    - Find the workflow run triggered by your pull request merge.
                2. **Check Workflow Logs:**
                    - Click on the workflow run to view detailed logs.
                    - Ensure that all steps in the workflow (such as building the Docker image, deploying to Google Cloud Run) are completed successfully.
                3. **Verify Deployment:**
                    - Once the workflow has completed, navigate to Google Cloud Console.
                    - Go to **Cloud Run** and verify that the new revision of your application is deployed and running.

                Have you monitored the workflow execution and verified the deployment?
        edges:
          - text: "Yes, everything looks good!"
            target_node_id: "screen6"
          - text: "I ran into an error."
            target_node_id: "screen5c"
      - id: screen5c
        type: message
        body:
          parts:
            - type: "text"
              content: |
                If you encounter issues during the workflow execution, let's troubleshoot them.

                **Steps to Follow:**

                1. **Check for Errors in Logs:**
                    - Look for any errors or failed steps in the GitHub Actions logs. Common issues might include authentication errors, deployment failures, or misconfigured steps.
                2. **Verify Configuration:**
                    - Ensure that the GitHub Actions YAML file is correctly configured. Double-check the secrets and environment variables used in the workflow.
                3. **Inspect Google Cloud Run Logs:**
                    - Check the logs in Google Cloud Run for any deployment issues or errors related to the application.

                Have you resolved the issues?
        edges:
          - text: "Yes, I've resolved the issues!"
            target_node_id: "screen6"
      - id: screen6
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Congratulations on successfully completing this mission! You have gained valuable hands-on experience in setting up a CI/CD pipeline, deploying a Dockerized Python application to Google Cloud Run using GitHub Actions, and troubleshooting any issues that arose during the process.

                **Summary of Key Learning Points:**

                1. **Configured GitHub Actions Workflow:**
                    - Created a GitHub Actions workflow file that defines the steps required to build and deploy your Dockerized application automatically when changes are merged into the main branch.
                2. **Set Up GitHub Secrets:**
                    - Added necessary secrets to your GitHub repository, ensuring that your workflow can authenticate and interact securely with Google Cloud Run.
                3. **Validated Workflow Execution:**
                    - Pushed changes to trigger the CI/CD pipeline, verified the workflow execution, and ensured successful deployment to Google Cloud Run.
                4. **Troubleshot Issues:**
                    - Used GitHub Actions and Google Cloud Run logs to identify and resolve issues, ensuring a reliable CI/CD process.

                **Looking Ahead:**

                In the next mission, we will learn to further improve our CI/CD pipeline by adding pre-checks for security. This will enhance our ability to maintain secure and robust cloud-based applications.

                Thank you for participating in this mission. Your ability to set up and manage a CI/CD pipeline will greatly enhance your development workflow and support the continuous delivery of high-quality software.
        edges:
          - text: "End Mission"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Thank you for completing the mission. Keep up the good work!
