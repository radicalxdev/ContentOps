tasks:
  - name: "Introduction and Setup"
    context: "In this set, learners are introduced to the process of creating a database schema for the automated ticket assignment system using generative AI tools. They start by creating a new file in their workspace and preparing the dashboard for document and diagram integration."
    id: "1"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Hello, {username}! With the visual mapping of the automated ticket assignment system complete, it's time to move forward with development. Imagine you're developing the database for this new system. The first step is creating the database schema. Normally this would involve a lot of work in creating the data model for a database schema and then ensuring it adheres to normalization standards. But with generative AI tools like Eraser, we can simplify that process!
        edges:
          - text: "Ready to start!"
            target_node_id: "END"

      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Create a new file from your workspace dashboard. Then, if not already, select the “both” option. This will split the dashboard, displaying the documents on the left side and the diagramming canvas on the right. Once you're ready, let me know!

  - name: "Technical Design Documents with Eraser AI"
    context: "In this set, learners are introduced to the process of creating a database schema for the automated ticket assignment system using generative AI tools. They start by creating a new file in their workspace and preparing the dashboard for document and diagram integration."
    id: "2"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                In the Diagram Generation Prompt, input the detailed technical design document you previously created. If you don't have it, use the following document:
                
                ```
                # Technical Design Document
                ## 1. Introduction
                - **Purpose**: Describe the purpose of the document.
                - **Scope**: Define the scope of the ticket assignment system.
                - **Definitions, Acronyms, and Abbreviations**: List and define any terms used in the document.
                ## 2. System Overview
                - **Objective**: The goal is to develop a robust and functional ticket assignment system for AI TaskMaster, ensuring seamless collaboration and ideation within the internal team before presenting the final approach to stakeholders.
                - **Components of the System**:
                    - Automated Ticket Routing
                    - Dynamic Workload Balancing
                    - Skill Matching
                    - Real-Time Analytics
                    - Collaboration Tools
                ## 3. System Architecture
                - **High-Level Architecture Diagram**: Include a diagram showing the overall system architecture.
                - **Technology Stack**:
                    - Python
                    - Next.js
                    - MySQL
                    - TensorFlow
                    - Third-party analytics service (e.g., Google Analytics, Mixpanel)
                    - Open-source analytics tools (e.g., Grafana, Kibana)
                    - OAuth
                    - Integration with existing tools (e.g., Slack, Microsoft Teams)
                ## 4. Component Design
                ### 4.1 Automated Ticket Routing
                - **Description**: Explain how AI will categorize and assign tickets.
                - **Criteria**: Priority, complexity, team expertise.
                - **AI/ML Framework**: TensorFlow.
                ### 4.2 Dynamic Workload Balancing
                - **Description**: Explain how the system will monitor and adjust workloads.
                - **Mechanism**: Describe the algorithm or method used for balancing.
                ### 4.3 Skill Matching
                - **Description**: Explain how the system will match skills to tickets.
                - **Mechanism**: Describe the skill analysis and matching process.
                ### 4.4 Real-Time Analytics
                - **Description**: Explain the real-time analytics features.
                - **Platform**: Third-party analytics service (e.g., Google Analytics, Mixpanel), Open-source analytics tools (e.g., Grafana, Kibana).
                ### 4.5 Collaboration Tools
                - **Description**: Explain the integrated chat and discussion forums.
                - **Tools**: Integration with existing tools (e.g., Slack, Microsoft Teams).
                ## 5. Data Design
                - **Database Schema**: Provide the schema for MySQL.
                - **Data Flow**: Describe how data will flow through the system.
                ## 6. Security Considerations
                - **User Authentication and Authorization**: OAuth.
                - **Data Security**: Data encryption, regular security audits.
                - **Compliance**: GDPR/CCPA, role-based access control.
                ## 7. Performance Metrics
                - **Response Times**: Define acceptable response times.
                - **Resolution Rates**: Define acceptable resolution rates.
                ## 8. Testing Strategy
                - **Unit Testing**: Describe the approach for unit testing.
                - **Integration Testing**: Describe the approach for integration testing.
                - **End-to-End Testing**: Describe the approach for end-to-end testing.
                - **Load Testing**: Describe the approach for load testing.
                ## 9. Deployment Plan
                - **Environment**: Cloud-based.
                - **Steps**: Outline the steps for deploying the system.
                ## 10. Maintenance and Support
                - **Maintenance Plan**: Describe the plan for maintaining the system.
                - **Support Resources**: List resources available for support.
                ## 11. Appendices
                - **Glossary**: Define any additional terms used in the document.
                - **References**: List any references or external documents used.
                
                ```

        edges:
          - text: "Entered the prompt"
            target_node_id: "screen5"

      - id: screen5
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Select "Entity Relationship" as the Diagram type and click on Generate. The entity relationship diagram is common for defining how items within the database relate to one another such as `one-to-many`.

        edges:
          - text: "Selected Entity Relationship and generated the diagram"
            target_node_id: "END"

      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Review the generated entity-relationship diagram. You may notice that the database is not fully normalized. So while the generative AI can craft the template for us, we still have to remember that context is what drives its output. We’ll spend some time to normalize the diagram.

                One workaround with this is that we can create the template with a general prompt and then use feedback through natural language to modify the generated output as it goes to make it more refined. This increases the prompts we send but helps build from the ground-up in terms of our custom context where a very large prompt with many instructions may not perfectly capture everything we want. Iterative processes with generative AI are highly effective!

  - name: "Normalize Database Schema with Eraser AI"
    context: "In this set, learners are introduced to the process of creating a database schema for the automated ticket assignment system using generative AI tools. They start by creating a new file in their workspace and preparing the dashboard for document and diagram integration."
    id: "3"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Database normalization is the process of organizing the fields and tables of a relational database to minimize redundancy and dependency. It ensures the database is efficient, scalable, and easily maintainable. Normalization involves dividing large tables into smaller ones and defining relationships between them.

        edges:
          - text: "Understood database normalization"
            target_node_id: "screen8"

      - id: screen8
        type: message
        body:
          parts:
            - type: "text"
              content: |
                To normalize the database, enter the following prompt into the Diagram Edit Prompt:

                ```
                Normalize this database to 5NF.
                ```

        edges:
          - text: "Normalized the database"
            target_node_id: "screen9"

      - id: screen9
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Here are the common normal forms in database normalization:

                1. **First Normal Form (1NF)**: Ensures that the table is flat with atomic values.
                2. **Second Normal Form (2NF)**: Ensures all non-key attributes are fully functionally dependent on the primary key.
                3. **Third Normal Form (3NF)**: Ensures all non-key attributes are not transitively dependent on other non-key attributes.
                4. **Boyce-Codd Normal Form (BCNF)**: A stricter version of 3NF where every determinant must be a candidate key.
                5. **Fourth Normal Form (4NF)**: Ensures no multi-valued dependencies.
                6. **Fifth Normal Form (5NF)**: Ensures no join dependencies not implied by the candidate keys.

        edges:
          - text: "Understood the normal forms"
            target_node_id: "screen10"

      - id: screen10
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Review the normalized database schema generated by Eraser AI. Ensure it meets your requirements for efficiency and scalability.

        edges:
          - text: "Reviewed the normalized schema"
            target_node_id: "END"

      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                While higher normal forms like 4NF and 5NF offer benefits in terms of reducing redundancy and improving data integrity, they also have drawbacks such as complexity, performance overhead, and increased storage requirements. Balancing normalization and practicality is key.


  - name: "Denormalize a Database Schema with Eraser AI"
    context: "This set covers the final steps of denormalizing a database schema using Eraser AI and summarizes the importance of context-aware generative AI in documentation and planning. It emphasizes the practical balance between normalization and denormalization, highlighting how Eraser AI can aid in making informed design decisions."
    id: "4"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "text"
              content: |
                While 4NF and 5NF offer theoretical advantages in terms of data integrity and redundancy elimination, it is important to balance these benefits with the practical needs of the application. In many cases, achieving 3NF or BCNF (Boyce-Codd Normal Form) provides sufficient normalization without introducing excessive complexity. Database designers often use denormalization techniques strategically to optimize performance and simplify query writing, especially in read-heavy applications where speed is critical.

        edges:
          - text: "Understood"
            target_node_id: "screen14"

      - id: screen14
        type: message
        body:
          parts:
            - type: "text"
              content: |
                Eraser AI also allows you to denormalize a database schema if it has been normalized to a higher form.

                From the same editor, enter the following prompt into the Diagram Edit Prompt:

                ```
                Denormalize this database to an applicable form.
                ```

                You may notice some differences in this denormalized form and the 3NF normalized form. While AI is good at context awareness, it is still recommended to manually review the generated content for discrepancies.

        edges:
          - text: "Denormalized the database"
            target_node_id: "END"

      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: |
                We’ve come across another scenario where Eraser AI’s context awareness is incredibly useful for generating documentation and planning. In this case, when dealing with data models, Eraser AI is capable of understanding the difference of normalization levels and applying them accordingly.
            - type: "text"
              content: |
                When an engineer needs to make design decisions, especially regarding data models, spending time to visually understand changes and its impact could mean saving a meeting or two with seniors by being able to connect dots and reason. The interactivity of compiling natural language into visual elements or technical docs is instrumental for increasing a team’s velocity.
