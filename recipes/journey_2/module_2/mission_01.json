{
  "tasks": [
    {
      "context": "In this mission, learners are introduced to improving code quality using GitHub Copilot Chat. They start by understanding the learning objectives, which include demonstrating the use of chat participants and variables for effective prompts, and specifying code quality aspects for improvement. Learners are then guided to prepare the repository by cloning it from GitHub, creating environment files, and activating the shell script to set up the development or production environment. This setup prepares them for the upcoming exercises where they will use Copilot Chat to generate and evaluate suggestions for code quality improvements.",
      "id": "1",
      "name": "Introduction and Setup",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "Hello, {username}! Welcome to the 'AI-Driven Code Quality Improvements' mission. This exercise focuses on using GitHub Copilot Chat to generate suggestions for improving code quality in a sample application. Remember, the suggestions from Copilot do not represent best practices or comprehensive solutions. Use your judgment and expertise to evaluate and implement these suggestions. Ready to start?\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "Yes, let's get started!"
            },
            {
              "target_node_id": "screen1a",
              "text": "Tell me more about the objectives."
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "In this mission, you'll use GitHub Copilot to generate suggestions that help improve code quality in a sample application. The learning objectives are:\n- Demonstrate when to use chat participants and chat variables to help specify an outer context for effective prompts.\n- Specify code quality aspects for improvement to develop effective prompts.\n",
                "type": "text"
              },
              {
                "content": "Ready to proceed?",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "Yes, let's move on!"
            }
          ],
          "id": "screen1a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Let's prepare the repository for this exercise. Follow these steps:\n1. Clone the GitHub repository found at: https://github.com/alfred-ai-co/Improve-Code-Quality-with-Copilot\n2. Create a `dev.env` and `prod.env` file based on the `env.example`, setting the variable `APP_ENV` to “dev” or “prod” respectively.\n3. In the terminal, activate the shell script `start.sh` with the command: `/start.sh <args>`, where you may set `dev` or `prod` as the argument. By default, a `dev` environment is instantiated.\n",
                "type": "text"
              },
              {
                "content": "Ready to continue?",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "In this part of the mission, learners focus on developing prompts for GitHub Copilot Chat to enhance code quality by improving readability, maintainability, and modularity. They are instructed to open the app/db_models/base.py file and review the code, which now includes Kanban Board models. Learners are then guided to write prompts, such as asking for suggestions on improving code readability or modularity, and refactoring the selected code. After writing the prompts, they review the suggestions generated by Copilot Chat and prepare to proceed with the refactoring process. This step emphasizes the practical use of Copilot Chat in identifying and implementing code quality improvements.",
      "id": "2",
      "name": "Develop Prompts for Copilot Chat",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "Now, we'll develop prompts for GitHub Copilot Chat to improve code readability, maintainability, and modularity. Open the `app/db_models/base.py` file and review the code. The project management API now includes Kanban Boards with related models `KanbanBoard` and `KanbanStatus`.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen3a",
              "text": "Got it, let's continue!"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Take a minute to write some prompts to improve code quality. Here are some examples:\n- `@workspace /explain #file:base.py How can I improve the readability of the selected code?`\n- `@workspace /explain #file:crud.py #selection How can I improve the maintainability of the selected code?`\n- `@workspace /explain #file:crud.py #selection How can I improve the modularity of the selected code?`\n- `#file:crud.py #selection How can I refactor the selected code to improve modularity?`\n- `@workspace /explain #file:crud.py What are some options for simplifying the selected code?`\n",
                "type": "text"
              },
              {
                "content": "Ready to continue?",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "Prompts written!"
            }
          ],
          "id": "screen3a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Review the suggestions generated by GitHub Copilot Chat. An example of one such output can be like below:",
                "type": "text"
              },
              {
                "content": "https://firebasestorage.googleapis.com/v0/b/reality-ai-b2b-sandbox.appspot.com/o/Program%2FJourney%202%2FModule%202%2FUnit%202%2Fmodule_2_mission_1_1.png?alt=media&token=f7a4f186-c5fd-4009-8e96-3380aa599d0b",
                "type": "image"
              },
              {
                "content": "Ready to proceed with refactoring?",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    },
    {
      "context": "In this part of the mission, learners use GitHub Copilot Chat to refactor code and improve its quality by applying SOLID principles. They start by prompting Copilot for suggestions on implementing these principles to enhance modularity and maintainability. After reviewing suggestions, such as creating a DatabaseOperations class and handling special CRUD requirements through subclassing a BaseCRUD class, learners gain insights into effective code refactoring. The mission concludes with a summary, emphasizing the importance of reviewing and evaluating Copilot's suggestions before implementation, showcasing how Copilot can assist in enhancing code readability, maintainability, and modularity.",
      "id": "3",
      "name": "Refactor Code using Copilot Chat",
      "nodes": [
        {
          "body": {
            "parts": [
              {
                "content": "Use GitHub Copilot Chat to suggest code updates that refactor and improve your code. Review suggestions carefully and consider which ones support your goals. For this exercise, let's use SOLID principles.\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4a",
              "text": "Got it, let's continue!"
            }
          ],
          "id": "START",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Try the following prompt to start refactoring CRUD operations:\n\n```python\n@workspace /explain #selection How do I implement SOLID principles to improve the modularity and maintainability of the code?\n```\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4b",
              "text": "Command entered!"
            }
          ],
          "id": "screen4a",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Review Copilot's response. It suggests creating a `DatabaseOperations` class for CRUD operations, following the Dependency Inversion Principle.\n",
                "type": "text"
              },
              {
                "content": "Ready to proceed?",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4c",
              "text": "Yes, let's continue!"
            }
          ],
          "id": "screen4b",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "If any database item has special requirements for CRUD operations, it may be challenging to handle. Ask Copilot:\n\n```python\nBut if any db item has special requirements for a CRUD operation, would that mean it would be difficult to handle?\n```\n",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "screen4d",
              "text": "Command entered!"
            }
          ],
          "id": "screen4c",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Review Copilot's response suggesting to subclass a `BaseCRUD` class.\n",
                "type": "text"
              },
              {
                "content": "You now have insights into how to refactor the code to improve modularity. Use your experience and analysis to collaborate with Copilot on a solution.\n",
                "type": "text"
              },
              {
                "content": "Ready to move forward?",
                "type": "text"
              }
            ]
          },
          "edges": [
            {
              "target_node_id": "END",
              "text": "Yes!"
            }
          ],
          "id": "screen4d",
          "type": "message"
        },
        {
          "body": {
            "parts": [
              {
                "content": "Congratulations, {username}! You've successfully used GitHub Copilot Chat to generate suggestions and refactor code to improve its quality. This exercise demonstrated how to interact with Copilot to enhance code readability, maintainability, and modularity. Remember, always review and assess the suggestions before implementing them.\n",
                "type": "text"
              }
            ]
          },
          "id": "END",
          "type": "message"
        }
      ]
    }
  ]
}
