tasks:
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '1'
  name: 'Question #1'
  nodes:
  - body:
      parts:
      - content: Hello {username}! Congratulations on completing the module on developing
          code features using GitHub Copilot. You've learned how to use Copilot to
          enhance your coding efficiency and accuracy. This probe will help reinforce
          your understanding and highlight any areas that may need further review.
          Ready to get started?
        type: text
    edges:
    - target_node_id: screen2
      text: Yes, I'm ready!
    id: START
    type: message
  - body:
      parts:
      - content: Alright {username}, let's begin with our first question!
        type: text
      - content: '**Q1. What is the best way to provide context to GitHub Copilot
          for better code suggestions?**



          A. By keeping all files closed in the editor.


          B. By using complex function names.


          C. By providing meaningful function names, specific function comments, and
          having related files open in the editor.


          D. By frequently switching between different coding languages.

          '
        type: text
    edges:
    - target_node_id: screen2_incorrect
      text: A
    - target_node_id: screen2_incorrect
      text: B
    - target_node_id: screen2_correct
      text: C
    - target_node_id: screen2_incorrect
      text: D
    id: screen2
    type: message
  - body:
      parts:
      - content: Excellent, {username}! Providing meaningful function names, specific
          function comments, and having related files open in the editor helps GitHub
          Copilot understand the context and offer more accurate suggestions.
        type: text
    edges:
    - target_node_id: screen2a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen2_correct
    type: message
  - body:
      parts:
      - content: Not quite, {username}. Providing meaningful function names, specific
          function comments, and having related files open in the editor helps GitHub
          Copilot understand the context and offer more accurate suggestions.
        type: text
    edges:
    - target_node_id: screen2a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen2_incorrect
    type: message
  - body:
      parts:
      - content: To maximize the effectiveness of GitHub Copilot, developers should
          provide meaningful context through clear and descriptive function names,
          specific comments within the code, and ensuring that related files are open
          in the editor. This context allows Copilot to better understand the structure
          and purpose of the code, leading to more relevant and accurate code suggestions.
          Without this context, Copilot might struggle to generate useful completions
          or suggestions.
        type: text
    edges:
    - target_node_id: screen2b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen2a
    type: message
  - body:
      parts:
      - content: For example, when writing a function to calculate the area of a rectangle,
          naming the function `calculateRectangleArea` and adding a comment like `//
          Function to calculate the area of a rectangle given width and height` provides
          Copilot with enough context to generate precise code for this function.
          Additionally, having related modules, such as geometry utilities, open in
          the editor can further improve suggestion accuracy.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen2b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's see how you can optimize
          your experience with GitHub Copilot Chat!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '2'
  name: 'Question #2'
  nodes:
  - body:
      parts:
      - content: '**Q2. How can a developer optimize their experience when interacting
          with GitHub Copilot via chat?**



          A. By being vague about the inputs, outputs, APIs, or frameworks they want
          to use.


          B. By using chat participants, slash commands, chat variables, and being
          specific in your prompts.


          C. By asking Copilot to perform large tasks at once.


          D. By using only keyboard shortcuts without any descriptive prompts.

          '
        type: text
    edges:
    - target_node_id: screen3_incorrect
      text: A
    - target_node_id: screen3_correct
      text: B
    - target_node_id: screen3_incorrect
      text: C
    - target_node_id: screen3_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: Spot on, {username}! Using specific prompts, chat participants, slash
          commands, and chat variables helps optimize interactions with GitHub Copilot
          Chat.
        type: text
    edges:
    - target_node_id: screen3a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen3_correct
    type: message
  - body:
      parts:
      - content: That's not correct, {username}. Using specific prompts, chat participants,
          slash commands, and chat variables helps optimize interactions with GitHub
          Copilot Chat.
        type: text
    edges:
    - target_node_id: screen3a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen3_incorrect
    type: message
  - body:
      parts:
      - content: To optimize the interaction with GitHub Copilot via chat, developers
          should be specific in their prompts, clearly defining the inputs, outputs,
          APIs, or frameworks they are using. Utilizing chat participants, slash commands,
          and chat variables can also help structure the conversation and guide Copilot
          towards more accurate and helpful responses. Vague or broad requests can
          lead to less relevant or generic suggestions, whereas specificity enhances
          the relevance and usefulness of Copilot's outputs.
        type: text
    edges:
    - target_node_id: screen3b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen3a
    type: message
  - body:
      parts:
      - content: For instance, instead of asking 'How do I use an API?' a more effective
          prompt would be 'Show me how to use the Fetch API in JavaScript to retrieve
          data from a public API endpoint and display it on a webpage.' This specific
          request helps Copilot provide a detailed and contextually relevant response.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen3b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's discuss maintaining high
          code quality!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '3'
  name: 'Question #3'
  nodes:
  - body:
      parts:
      - content: '**Q3. What is the effect of maintaining a high quality bar in your
          code when using GitHub Copilot?**



          A. Copilot latches on to your code to generate suggestions that follow the
          existing pattern.


          B. It confuses Copilot and leads to irrelevant suggestions.


          C. It slows down the suggestion process.


          D. It has no impact on Copilot''s suggestions.

          '
        type: text
    edges:
    - target_node_id: screen4_correct
      text: A
    - target_node_id: screen4_incorrect
      text: B
    - target_node_id: screen4_incorrect
      text: C
    - target_node_id: screen4_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: Exactly, {username}! Maintaining high-quality code helps Copilot
          generate suggestions that adhere to the same level of quality and follow
          existing patterns.
        type: text
    edges:
    - target_node_id: screen4a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen4_correct
    type: message
  - body:
      parts:
      - content: That's not right, {username}. Maintaining high-quality code helps
          Copilot generate suggestions that adhere to the same level of quality and
          follow existing patterns.
        type: text
    edges:
    - target_node_id: screen4a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen4_incorrect
    type: message
  - body:
      parts:
      - content: Keeping a high quality bar in your code encourages GitHub Copilot
          to generate suggestions that are consistent with the existing codebase's
          standards and patterns. This means that well-structured, clean, and documented
          code will guide Copilot to produce similarly high-quality suggestions. Conversely,
          poorly written code can result in less effective and potentially error-prone
          suggestions from Copilot.
        type: text
    edges:
    - target_node_id: screen4b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen4a
    type: message
  - body:
      parts:
      - content: For example, if a developer maintains clean and well-documented code
          when implementing a new feature, Copilot will be more likely to generate
          suggestions that include proper documentation, adhere to coding standards,
          and integrate seamlessly with the existing codebase. This helps maintain
          overall code quality and consistency.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen4b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's see how GitHub Copilot
          determines code suggestions!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '4'
  name: 'Question #4'
  nodes:
  - body:
      parts:
      - content: '**Q4. How does GitHub Copilot determine the code completion suggestions
          it provides?**



          A. Based on the context of code in the editor.


          B. Based on the programming language used.


          C. Based on the length of the code written.


          D. Based on the frequency of code commits.

          '
        type: text
    edges:
    - target_node_id: screen5_correct
      text: A
    - target_node_id: screen5_incorrect
      text: B
    - target_node_id: screen5_incorrect
      text: C
    - target_node_id: screen5_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: That's correct, {username}! GitHub Copilot uses the context of the
          code in the editor to provide relevant completion suggestions.
        type: text
    edges:
    - target_node_id: screen5a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen5_correct
    type: message
  - body:
      parts:
      - content: Not quite, {username}. GitHub Copilot uses the context of the code
          in the editor to provide relevant completion suggestions.
        type: text
    edges:
    - target_node_id: screen5a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen5_incorrect
    type: message
  - body:
      parts:
      - content: GitHub Copilot analyzes the context of the code currently open and
          being edited to generate code completion suggestions. This includes understanding
          the surrounding code, function definitions, comments, and any other relevant
          files in the project. By considering this context, Copilot can offer more
          precise and contextually appropriate suggestions that integrate smoothly
          with the existing code.
        type: text
    edges:
    - target_node_id: screen5b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen5a
    type: message
  - body:
      parts:
      - content: For instance, if a developer is writing a function to handle user
          authentication in a file where other authentication-related functions are
          defined, Copilot will use this context to suggest code that aligns with
          the existing authentication logic and conventions in the file.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen5b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's explore code completion
          suggestions!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '5'
  name: 'Question #5'
  nodes:
  - body:
      parts:
      - content: '**Q5. What happens when GitHub Copilot generates more than one code
          completion suggestion?**



          A. It adds all of the suggestions to your code.


          B. It selects the most relevant suggestion automatically.


          C. It enables developers to review each suggestion by selecting the left
          or right arrows.


          D. It ignores all suggestions and prompts the developer to re-enter the
          code.

          '
        type: text
    edges:
    - target_node_id: screen6_incorrect
      text: A
    - target_node_id: screen6_incorrect
      text: B
    - target_node_id: screen6_correct
      text: C
    - target_node_id: screen6_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: Exactly, {username}! When multiple suggestions are generated, Copilot
          allows developers to review and choose the best one using left or right
          arrows.
        type: text
    edges:
    - target_node_id: screen6a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen6_correct
    type: message
  - body:
      parts:
      - content: That's not quite right, {username}. When multiple suggestions are
          generated, Copilot allows developers to review and choose the best one using
          left or right arrows.
        type: text
    edges:
    - target_node_id: screen6a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen6_incorrect
    type: message
  - body:
      parts:
      - content: When GitHub Copilot generates more than one code completion suggestion,
          it provides an interface that allows developers to review each suggestion
          by navigating through them using left or right arrows. This feature helps
          developers evaluate the different options and select the most relevant or
          accurate one for their specific use case. It ensures that developers can
          consider multiple possible solutions and choose the best fit for their code.
        type: text
    edges:
    - target_node_id: screen6b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen6a
    type: message
  - body:
      parts:
      - content: For example, if Copilot generates several different ways to implement
          a sorting algorithm, the developer can use the arrows to review each implementation
          and choose the one that best fits their requirements or coding style.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen6b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's dive into the inline chat
          feature in GitHub Copilot!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '6'
  name: 'Question #6'
  nodes:
  - body:
      parts:
      - content: '**Q6. What is the purpose of the inline chat feature in GitHub Copilot?**



          A. To run and debug unit tests.


          B. To write new code snippets for unit tests.


          C. To ask questions and get help while coding, without leaving the code
          editor.


          D. To format code according to style guidelines.

          '
        type: text
    edges:
    - target_node_id: screen7_incorrect
      text: A
    - target_node_id: screen7_incorrect
      text: B
    - target_node_id: screen7_correct
      text: C
    - target_node_id: screen7_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: That's correct, {username}! The inline chat feature allows developers
          to ask questions and get assistance directly within the code editor.
        type: text
    edges:
    - target_node_id: screen7a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen7_correct
    type: message
  - body:
      parts:
      - content: That's not correct, {username}. The inline chat feature allows developers
          to ask questions and get assistance directly within the code editor.
        type: text
    edges:
    - target_node_id: screen7a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen7_incorrect
    type: message
  - body:
      parts:
      - content: The inline chat feature in GitHub Copilot is designed to provide
          a seamless way for developers to ask questions and receive help without
          having to leave the code editor. This feature enhances productivity by allowing
          developers to get real-time assistance, clarify doubts, and find relevant
          code examples or explanations, all within the context of their current coding
          environment.
        type: text
    edges:
    - target_node_id: screen7b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen7a
    type: message
  - body:
      parts:
      - content: For instance, if a developer is unsure about how to use a specific
          method in a library, they can use the inline chat to ask, 'How do I use
          the `find` method in the lodash library?' Copilot can then provide a detailed
          explanation and example directly in the editor, saving time and keeping
          the workflow uninterrupted.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen7b
    type: message
  - body:
      parts:
      - content: Ready for the next one, {username}? Let's explore how Copilot helps
          with unfamiliar libraries or frameworks!
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '7'
  name: 'Question #7'
  nodes:
  - body:
      parts:
      - content: '**Q7. What benefit does GitHub Copilot provide when dealing with
          unfamiliar libraries or frameworks?**



          A. It ignores the unfamiliar libraries or frameworks.


          B. It provides suggestions and code examples that demonstrate how to use
          the new resources.


          C. It automatically installs the libraries or frameworks.


          D. It removes the unfamiliar libraries or frameworks from the code.

          '
        type: text
    edges:
    - target_node_id: screen8_incorrect
      text: A
    - target_node_id: screen8_correct
      text: B
    - target_node_id: screen8_incorrect
      text: C
    - target_node_id: screen8_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: Exactly, {username}! GitHub Copilot offers suggestions and examples
          to help developers understand and use unfamiliar libraries or frameworks.
        type: text
    edges:
    - target_node_id: screen8a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen8_correct
    type: message
  - body:
      parts:
      - content: That's not it, {username}. GitHub Copilot offers suggestions and
          examples to help developers understand and use unfamiliar libraries or frameworks.
        type: text
    edges:
    - target_node_id: screen8a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen8_incorrect
    type: message
  - body:
      parts:
      - content: When developers encounter unfamiliar libraries or frameworks, GitHub
          Copilot can provide valuable assistance by generating suggestions and code
          examples that demonstrate how to use these new resources effectively. This
          helps developers quickly learn and integrate new tools into their projects,
          enhancing their productivity and reducing the learning curve associated
          with adopting new technologies.
        type: text
    edges:
    - target_node_id: screen8b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen8a
    type: message
  - body:
      parts:
      - content: For example, if a developer is using a new framework like Next.js
          for the first time, they can ask Copilot for help by typing 'How do I set
          up routing in Next.js?' Copilot can then generate sample code and explanations,
          guiding the developer through the process of setting up routes in their
          project.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen8b
    type: message
  - body:
      parts:
      - content: Let's keep going, {username}! Here's a question about Copilot's assistance
          with initial code structures.
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '8'
  name: 'Question #8'
  nodes:
  - body:
      parts:
      - content: '**Q8. How does GitHub Copilot enhance the development of initial
          code structures?**



          A. By writing the entire codebase automatically.


          B. By generating code completion suggestions as you type, based on the existing
          code and comments.


          C. By removing all comments from the code.


          D. By creating project documentation automatically.

          '
        type: text
    edges:
    - target_node_id: screen9_incorrect
      text: A
    - target_node_id: screen9_correct
      text: B
    - target_node_id: screen9_incorrect
      text: C
    - target_node_id: screen9_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: That's right, {username}! GitHub Copilot generates real-time code
          completion suggestions based on the current code and comments.
        type: text
    edges:
    - target_node_id: screen9a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen9_correct
    type: message
  - body:
      parts:
      - content: Not quite, {username}. GitHub Copilot generates real-time code completion
          suggestions based on the current code and comments.
        type: text
    edges:
    - target_node_id: screen9a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen9_incorrect
    type: message
  - body:
      parts:
      - content: GitHub Copilot enhances the development of initial code structures
          by providing real-time code completion suggestions as developers type. These
          suggestions are based on the existing code, comments, and context within
          the editor, helping developers quickly build out their codebase with relevant
          and accurate snippets. This accelerates the coding process and ensures that
          the initial code structure is well-aligned with the intended functionality.
        type: text
    edges:
    - target_node_id: screen9b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen9a
    type: message
  - body:
      parts:
      - content: For instance, if a developer is creating a new function to handle
          user authentication and has written the initial comments, Copilot can suggest
          the necessary code to implement the function based on those comments, streamlining
          the development process and ensuring that the code matches the described
          functionality.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen9b
    type: message
  - body:
      parts:
      - content: Here's the next question, {username}! Let's explore the role of chat
          participants, slash commands, and chat variables in GitHub Copilot Chat.
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '9'
  name: 'Question #9'
  nodes:
  - body:
      parts:
      - content: '**Q9. What role do chat participants, slash commands, and chat variables
          play in GitHub Copilot Chat?**



          A. They slow down the chat responses.


          B. They help Copilot Chat understand the context and intent of your questions,
          leading to more relevant responses.


          C. They confuse Copilot Chat.


          D. They limit the functionality of Copilot Chat.

          '
        type: text
    edges:
    - target_node_id: screen10_incorrect
      text: A
    - target_node_id: screen10_correct
      text: B
    - target_node_id: screen10_incorrect
      text: C
    - target_node_id: screen10_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: Exactly, {username}! These features help GitHub Copilot Chat understand
          your context and intent, leading to more relevant responses.
        type: text
    edges:
    - target_node_id: screen10a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen10_correct
    type: message
  - body:
      parts:
      - content: That's not quite right, {username}. These features help GitHub Copilot
          Chat understand your context and intent, leading to more relevant responses.
        type: text
    edges:
    - target_node_id: screen10a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen10_incorrect
    type: message
  - body:
      parts:
      - content: Chat participants, slash commands, and chat variables play a crucial
          role in enhancing the functionality and accuracy of GitHub Copilot Chat.
          They help the chat interface understand the specific context and intent
          behind a developer's questions or commands, enabling Copilot to provide
          more accurate and relevant responses. By clearly defining the roles and
          context within the conversation, these features ensure that Copilot's assistance
          is better tailored to the developer's needs.
        type: text
    edges:
    - target_node_id: screen10b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen10a
    type: message
  - body:
      parts:
      - content: For example, a developer might use a slash command like `/explain`
          followed by a specific function name to get a detailed explanation of what
          the function does. This clear context helps Copilot provide a precise and
          relevant response.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen10b
    type: message
  - body:
      parts:
      - content: Almost there, {username}! Let's discuss the importance of reviewing
          code generated by GitHub Copilot.
        type: text
    id: END
    type: message
- context: 'This probe reinforces your understanding of using GitHub Copilot for developing
    code features.

    It includes questions on providing context for better code suggestions, optimizing
    interactions with Copilot Chat, maintaining high code quality, understanding code
    completion suggestions, and reviewing generated code.

    Learners will solidify their knowledge, identify areas for improvement, and enhance
    their ability to create precise and efficient code with GitHub Copilot.

    DO NOT give the users answer to the questions in any case.

    This is very important for my reputation so follow the instructions correctly.

    If you follow the instructions correctly, you will be rewarded.

    '
  id: '10'
  name: 'Question #10'
  nodes:
  - body:
      parts:
      - content: '**Q10. Why should developers review the code generated by GitHub
          Copilot?**



          A. Because Copilot never makes mistakes.


          B. To ensure the generated code meets their requirements and follows best
          practices.


          C. To automatically accept all suggestions.


          D. To save time without considering code quality.

          '
        type: text
    edges:
    - target_node_id: screen11_incorrect
      text: A
    - target_node_id: screen11_correct
      text: B
    - target_node_id: screen11_incorrect
      text: C
    - target_node_id: screen11_incorrect
      text: D
    id: START
    type: message
  - body:
      parts:
      - content: That's correct, {username}! Developers need to review Copilot's code
          to ensure it meets their requirements and adheres to best practices.
        type: text
    edges:
    - target_node_id: screen11a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen11_correct
    type: message
  - body:
      parts:
      - content: That's not correct, {username}. Developers need to review Copilot's
          code to ensure it meets their requirements and adheres to best practices.
        type: text
    edges:
    - target_node_id: screen11a
      text: Explain more, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen11_incorrect
    type: message
  - body:
      parts:
      - content: While GitHub Copilot can significantly speed up the coding process
          by generating helpful code snippets, it is essential for developers to review
          the generated code thoroughly. This review ensures that the code meets the
          specific requirements of the project, adheres to best practices, and is
          free from errors or security vulnerabilities. By validating Copilot's suggestions,
          developers can maintain high code quality and reliability in their projects.
        type: text
    edges:
    - target_node_id: screen11b
      text: Give me an example, Ada!
    - target_node_id: END
      text: On to the next, Ada!
    id: screen11a
    type: message
  - body:
      parts:
      - content: For instance, if Copilot generates a piece of code for handling user
          input, the developer should review it to ensure it includes proper validation
          and sanitization to prevent security issues such as SQL injection or cross-site
          scripting (XSS) attacks. This step is crucial to maintain the integrity
          and security of the application.
        type: text
    edges:
    - target_node_id: END
      text: On to the next, Ada!
    id: screen11b
    type: message
  - body:
      parts:
      - content: Fantastic work, {username}! You've completed the quiz. Let's quickly
          recap what we covered in this module.
        type: text
      - content: '**Recap:**


          - We explored how to provide context to GitHub Copilot for better code suggestions.

          - We learned how to optimize interactions with GitHub Copilot via chat.

          - We discussed maintaining high code quality and the importance of context
          in code completion.

          - We emphasized the role of reviewing Copilot''s code to ensure it meets
          requirements and follows best practices.'
        type: text
      - content: Up next, we'll dive into the next module, where we'll explore advanced
          techniques for using GitHub Copilot.
        type: text
    id: END
    type: message
