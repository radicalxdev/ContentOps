tasks:
  - name: "Develop Unit Tests for Specific Conditions With GitHub Copilot"
    context: "This mission focuses on developing unit tests for specific conditions using GitHub Copilot, streamlining the process of writing tests to assess functionality and boundary conditions. It also covers identifying and fixing bugs in unreliable code, enhancing overall code reliability and performance."
    id: "2"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "image"
              content: "[Link to GIF of Ada AI greeting with a welcoming gesture.]"
            - type: "text"
              content: "Hello, {username}! You're now adding a new feature to the scheduler that allows multiple assignees to be assigned to a single project automatically. Ready to write a unit test to check this new feature?"
        edges:
          - text: "Ready to start!"
            target_node_id: "screen2"
      - id: screen2
        type: message
        body:
          parts:
            - type: "text"
              content: "First, let's navigate to the feature script in the Git repository. Open `scheduler_feature.py`."
        edges:
          - text: "Opened the feature script"
            target_node_id: "screen3"
      - id: screen3
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's take a look at the new `scheduler_feature.py` code:"
            - type: "text"
              content: |
                1. **Imports and Data Definitions:** The script imports necessary libraries and defines lists of projects and assignees.
                2. **Scheduling Function:** The `schedule_projects` function sorts projects by priority and deadline, then assigns multiple assignees to each project using a heap to balance workloads.
        edges:
          - text: "Understood the new code"
            target_node_id: "screen4"
          - text: "Need more details"
            target_node_id: "screen3a"
      - id: screen3a
        type: message
        body:
          parts:
            - type: "text"
              content: "In the `schedule_projects` function:"
            - type: "text"
              content: |
                - **Sorting Projects:** Projects are sorted by priority and deadline.
                - **Assigning Assignees:** A heap is used to balance the workloads among assignees.
                - **Bug Explanation:** The calculation for the number of assignees per project is incorrect, leading to an error in assigning the correct number of assignees.
        edges:
          - text: "Got it"
            target_node_id: "screen4"
      - id: screen4
        type: message
        body:
          parts:
            - type: "text"
              content: "Open GitHub Copilot Chat and generate the unit test cases again using the same command as you previously learned:"
            - type: "text"
              content: |
                ```
                @workspace /tests #selection Write a pytest test to check if multiple assignees are assigned to projects.
                ```
        edges:
          - text: "Generated unit tests"
            target_node_id: "screen5"
      - id: screen5
        type: message
        body:
          parts:
            - type: "text"
              content: "Create a new file in this branch named `test_feature.py` and paste the generated unit test into this file."
        edges:
          - text: "Created the test file and pasted the code"
            target_node_id: "screen6"
          - text: "Need help"
            target_node_id: "screen5a"
      - id: screen5a
        type: message
        body:
          parts:
            - type: "text"
              content: "If you're stuck, you can refer to the `tests/example_test.py` file for a sample unit test."
        edges:
          - text: "Checked example_test.py and created the test file"
            target_node_id: "screen6"
      - id: screen6
        type: message
        body:
          parts:
            - type: "text"
              content: "GitHub Copilot offers more than mere code generation; it also provides additional edge case suggestions upon request, which you can prompt in the GitHub Copilot Chat using the following command:"
            - type: "text"
              content: |
                ```
                @workspace #selection Are there any other edge cases that should also be tested?
                ```
            - type: "text"
              content: |
                Take a moment to review the suggestions from GitHub Copilot. It should look similar to this:
                ```
                Here are key edge cases and scenarios to test for robustness:
                1. No Projects: Test with an empty projects list to ensure graceful handling and an empty assignment list.
                2. No Assignees: Verify behavior with no assignees available.
                3. Single Project and Assignee: Ensure correct assignment with one project and one assignee.
                4. Same Priority and Deadline: Test how the function...
                ```
        edges:
          - text: "Fantastic"
            target_node_id: "screen7"
      - id: screen7
        type: message
        body:
          parts:
            - type: "text"
              content: "Run the unit test with the following command:"
            - type: "text"
              content: |
                ```bash
                pytest test.py
                ```
        edges:
          - text: "Ran the tests"
            target_node_id: "screen8"
      - id: screen8
        type: message
        body:
          parts:
            - type: "text"
              content: "Observe that the test has failed due to an error with assigning multiple assignees. Unit testing identified this issue by verifying the number of assignees assigned to each project. You can use GitHub Copilot Chat to locate and fix the error by entering the following command:"
            - type: "text"
              content: |
                ```
                @workspace /fix Fix the scheduler_feature.py file code to assign multiple users per project correctly.
                ```
            - type: "text"
              content: "GitHub Copilot can assist in testing and fixing functional issues, but it is not a complete substitute for thorough testing and debugging."
        edges:
          - text: "Got it, let's move on"
            target_node_id: "screen9"
          - text: "More details about the error"
            target_node_id: "screen8a"
      - id: screen8a
        type: message
        body:
          parts:
            - type: "text"
              content: "The line causing the issue is:"
            - type: "text"
              content: |
                ```python
                assignees_per_project = (len(assignees) + 1) // 4
                ```
            - type: "text"
              content: "This calculation incorrectly limits the number of assignees per project. It should be:"
            - type: "text"
              content: |
                ```python
                assignees_per_project = (len(assignees) + 1) // 2
                ```
            - type: "text"
              content: "This adjustment ensures the correct number of assignees is assigned to each project."
        edges:
          - text: "Got it"
            target_node_id: "screen9"
      - id: screen9
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, create a Pull Request from the feature branch to the main branch. This will merge your changes into the main codebase."
        edges:
          - text: "Created the Pull Request"
            target_node_id: "screen10"
      - id: screen10
        type: message
        body:
          parts:
            - type: "text"
              content: "Here are some additional best practices to keep in mind:"
            - type: "text"
              content: |
                - **Regular Testing:** Run tests frequently during development to catch issues early.
                - **Comprehensive Coverage:** Ensure your tests cover all possible scenarios, including edge cases.
                - **Continuous Integration:** Use CI/CD pipelines to automate testing and deployment processes.
        edges:
          - text: "Understood"
            target_node_id: "screen11"
      - id: screen11
        type: message
        body:
          parts:
            - type: "text"
              content: "Here's a summary of what we covered today:"
            - type: "text"
              content: |
                1. **Switching to the Feature Branch:** Using Git commands to switch branches.
                2. **Understanding the New Code:** Analyzing the updated `scheduler.py` code:
                    - **Imports and Data Definitions:** The script imports necessary libraries and defines lists of projects and assignees.
                    - **Scheduling Function:** The `schedule_projects` function sorts projects by priority and deadline, then assigns multiple assignees to each project using a heap to balance workloads.
                    - **Bug in Code:** There is an issue where the number of assignees per project is calculated incorrectly.
                3. **Generating Unit Tests:** Using GitHub Copilot Chat to generate new unit tests for the multiple assignee feature.
                4. **Creating and Running Tests:** Setting up and executing `pytest` to validate your new feature.
                5. **Interpreting Test Results:** Understanding and fixing errors in the code.
                6. **Creating a Pull Request:** Merging your changes into the main codebase.
                7. **Best Practices:** Regular testing, comprehensive coverage, and continuous integration.
        edges:
          - text: "Finish"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Congratulations on completing the mission, {username}! Keep practicing these steps to become proficient in adding new features and writing unit tests with GitHub Copilot."