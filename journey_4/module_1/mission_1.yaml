# Mission #1: Creating Unit Tests Using GitHub Copilot Chat

tasks:
  - name: "Introduction"
    context: "Introduce the user to the scenario and prompt them to take the first action."
    id: "1"
    nodes:
      - id: START
        type: message
        body:
          parts:
            - type: "image"
              content: "[Link to GIF of Ada AI greeting with a welcoming gesture.]"
            - type: "text"
              content: "Hello, {username}! Imagine you're developing a new scheduling feature in AI TaskMaster that automatically assigns projects based on priority and deadlines. How will you ensure the code is functional and reliable?"
        edges:
          - text: "Generate unit tests"
            target_node_id: "screen2"
          - text: "Run the code and see if the output is correct"
            target_node_id: "screen2"
      - id: screen2
        type: message
        body:
          parts:
            - type: "text"
              content: "That's correct, {username}! Unit tests ensure that the code you write is not only functional but also reliably works with different types of inputs. Letâ€™s see how we can generate unit tests for this new feature using Python."
        edges:
          - text: "Ready to learn!"
            target_node_id: "screen3"
  - name: "Setting Up the Repository"
    context: "Guide the user through the initial repository setup."
    id: "2"
    nodes:
      - id: screen3
        type: message
        body:
          parts:
            - type: "text"
              content: "First, we need to clone the GitHub repository. Enter the following command in your terminal:"
            - type: "text"
              content: |
                ```bash
                git clone https://github.com/alfred-ai-co/python-unit-tests-using-github-copilot-tools
                ```
        edges:
          - text: "Cloned the repository"
            target_node_id: "screen4"
      - id: screen4
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Now, make sure you are in the main branch of the repository by entering this command:"
            - type: "text"
              content: |
                ```bash
                git checkout main
                ```
        edges:
          - text: "Checked out the main branch"
            target_node_id: "screen5"
  - name: "Code Review and Comprehension"
    context: "Help the user understand the existing code in the `scheduler.py` file."
    id: "3"
    nodes:
      - id: screen5
        type: message
        body:
          parts:
            - type: "text"
              content: "Next, open the `scheduler.py` file in your code editor. Take a minute to examine the code. The script imports necessary libraries, defines a list of projects and assignees, and includes a function to schedule projects based on priority and deadline."
        edges:
          - text: "Reviewed the code"
            target_node_id: "screen6"
      - id: screen6
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's break down the main function:"
            - type: "text"
              content: |
                1. **Sorting Projects:** The projects are sorted by priority and deadline using the `sort` method.
                2. **Assigning Projects:** The function `schedule_projects` assigns projects to assignees using a heap (priority queue) to manage workloads efficiently.
                3. **Output:** The script prints out the assignments, showing which project is assigned to which assignee.
        edges:
          - text: "Everything is clear"
            target_node_id: "screen7"
          - text: "I have questions"
            target_node_id: "screen6a"
      - id: screen6a
        type: message
        body:
          parts:
            - type: "text"
              content: "Feel free to ask any questions you have about the code. Understanding it fully will help in writing effective unit tests. If you need more information, you can refer to the [README.md](http://readme.md/) file in the repository for a detailed explanation."
        edges:
          - text: "Understood"
            target_node_id: "screen7"
  - name: "Generating and Reviewing Unit Tests"
    context: "Utilize GitHub Copilot to generate and review unit tests."
    id: "4"
    nodes:
      - id: screen7
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, open GitHub Copilot Chat in your editor. Type the following command in the chat:"
            - type: "text"
              content: |
                ```
                @workspace /tests #selection Write pytest tests
                ```
        edges:
          - text: "Done"
            target_node_id: "screen8"
      - id: screen8
        type: message
        body:
          parts:
            - type: "text"
              content: "Great! Review the generated test cases. Do they cover all the critical functions of `scheduler.py`? Are there any edge cases you think might be missing?"
            - type: "text"
              content: |
                Unit tests can be written to check:
                1. **Project Sorting:** Verify that projects are sorted correctly by priority and deadline.
                2. **Assignment Logic:** Ensure that projects are assigned to the correct assignees based on workload.
                3. **Edge Cases:** Test how the function handles no projects, no assignees, or projects with the same priority and deadline.
        edges:
          - text: "The tests look good"
            target_node_id: "screen9"
          - text: "There are some gaps"
            target_node_id: "screen8a"
      - id: screen8a
        type: message
        body:
          parts:
            - type: "text"
              content: "Let's add any missing test cases to ensure we cover all scenarios. You can write custom tests or ask GitHub Copilot to generate specific cases."
        edges:
          - text: "Added the necessary tests"
            target_node_id: "screen9"
  - name: "Implementing and Running Tests"
    context: "Assist the user in creating, running, and interpreting unit tests."
    id: "5"
    nodes:
      - id: screen9
        type: message
        body:
          parts:
            - type: "text"
              content: "Create a new file in the repository named `test.py`."
        edges:
          - text: "Created the file"
            target_node_id: "screen10"
      - id: screen10
        type: message
        body:
          parts:
            - type: "text"
              content: "Copy the generated code from GitHub Copilot Chat and paste it into `test.py`."
        edges:
          - text: "Copied the code"
            target_node_id: "screen11"
      - id: screen11
        type: message
        body:
          parts:
            - type: "text"
              content: "Now, run the following command in the terminal to execute the tests:"
            - type: "text"
              content: |
                ```bash
                pytest test.py
                ```
        edges:
          - text: "Ran the tests"
            target_node_id: "screen12"
      - id: screen12
        type: message
        body:
          parts:
            - type: "text"
              content: "Fantastic! Now let's interpret the test results. Passed tests mean the corresponding parts of the code are working correctly. Failed tests highlight areas that need fixing. Review any failed tests to understand what went wrong."
        edges:
          - text: "Understood"
            target_node_id: "screen13"
      - id: screen13
        type: message
        body:
          parts:
            - type: "text"
              content: "GitHub Copilot Chat includes a convenient inline code generation feature. To use it, open `scheduler.py`, highlight the entire code, and right-click to choose \"Generate Tests\". In the inline chat editor, enter the command:"
            - type: "text"
              content: |
                ```
                Write using pytest
                ```
            - type: "text"
              content: "Then, click the \"Accept\" button marked with a check mark, and a new test script will be created."
        edges:
          - text: "Created the test script"
            target_node_id: "screen14"
  - name: "Best Practices and Summary"
    context: "Summarize the session and reinforce best practices for unit testing."
    id: "6"
    nodes:
      - id: screen14
        type: message
        body:
          parts:
            - type: "text"
              content: "Great job, {username}! Here are some best practices for unit testing:"
            - type: "text"
              content: |
                - Write tests for all critical functions and edge cases.
                - Regularly run tests to catch issues early.
                - Use meaningful test names to understand their purpose easily.
                - Keep tests isolated to ensure they do not depend on each other.
            - type: "text"
              content: "Would you like to see a summary of what we covered today?"
        edges:
          - text: "Show me the summary"
            target_node_id: "screen15"
      - id: screen15
        type: message
        body:
          parts:
            - type: "text"
              content: "Here's a summary of what we covered today:"
            - type: "text"
              content: |
                1. **Importance of Unit Testing:** Ensuring code functionality and reliability.
                2. **Cloning the Repository:** Using Git commands to set up your workspace.
                3. **Examining the Code:** Understanding the logic in `scheduler.py`:
                    - **Sorting Projects:** Projects are sorted by priority and deadline.
                    - **Assigning Projects:** Projects are assigned to assignees using a heap (priority queue) to manage workloads efficiently.
                    - **Output:** The script prints out the assignments, showing which project is assigned to which assignee.
                4. **Using GitHub Copilot Chat:** Automatically generating unit tests with AI.
                5. **Creating and Running Tests:** Setting up and executing `pytest` to validate your code.
                6. **Interpreting Test Results:** Understanding passed and failed tests.
                7. **Fixing Issues:** Debugging and re-running tests to ensure code quality.
                8. **Best Practices:** Writing comprehensive and meaningful unit tests.
        edges:
          - text: "Finish"
            target_node_id: "END"
      - id: END
        type: message
        body:
          parts:
            - type: "text"
              content: "Congratulations on completing the mission, {username}! Keep practicing these steps to become proficient in writing and running unit tests with GitHub Copilot."